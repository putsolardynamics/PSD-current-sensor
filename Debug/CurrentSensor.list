
CurrentSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005618  08005618  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005618  08005618  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005618  08005618  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08005690  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005690  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de4d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002577  00000000  00000000  0002dee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00030460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00031060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033c2  00000000  00000000  00031b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f157  00000000  00000000  00034f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd33  00000000  00000000  00044069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0d9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  000d0df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800559c 	.word	0x0800559c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800559c 	.word	0x0800559c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fa2:	4a19      	ldr	r2, [pc, #100]	; (8001008 <MX_ADC1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fce:	f000 fded 	bl	8001bac <HAL_ADC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fd8:	f000 fbe5 	bl	80017a6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fee:	f000 feb5 	bl	8001d5c <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ff8:	f000 fbd5 	bl	80017a6 <Error_Handler>
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000098 	.word	0x20000098
 8001008:	40012400 	.word	0x40012400

0800100c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_ADC_MspInit+0x6c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d121      	bne.n	8001070 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_ADC_MspInit+0x70>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_ADC_MspInit+0x70>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_ADC_MspInit+0x70>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_ADC_MspInit+0x70>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <HAL_ADC_MspInit+0x70>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_ADC_MspInit+0x70>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 800105c:	2320      	movs	r3, #32
 800105e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001060:	2303      	movs	r3, #3
 8001062:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_ADC_MspInit+0x74>)
 800106c:	f001 fe1e 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40012400 	.word	0x40012400
 800107c:	40021000 	.word	0x40021000
 8001080:	40010800 	.word	0x40010800

08001084 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_CAN_Init+0x64>)
 800108a:	4a18      	ldr	r2, [pc, #96]	; (80010ec <MX_CAN_Init+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_CAN_Init+0x64>)
 8001090:	2208      	movs	r2, #8
 8001092:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_CAN_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_CAN_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_CAN_Init+0x64>)
 80010a2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80010a6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_CAN_Init+0x64>)
 80010aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_CAN_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_CAN_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_CAN_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_CAN_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_CAN_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_CAN_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_CAN_Init+0x64>)
 80010d6:	f000 ff73 	bl	8001fc0 <HAL_CAN_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80010e0:	f000 fb61 	bl	80017a6 <Error_Handler>
  }

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000110 	.word	0x20000110
 80010ec:	40006400 	.word	0x40006400

080010f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a28      	ldr	r2, [pc, #160]	; (80011ac <HAL_CAN_MspInit+0xbc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d149      	bne.n	80011a4 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <HAL_CAN_MspInit+0xc0>)
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <HAL_CAN_MspInit+0xc0>)
 8001116:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800111a:	61d3      	str	r3, [r2, #28]
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_CAN_MspInit+0xc0>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_CAN_MspInit+0xc0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <HAL_CAN_MspInit+0xc0>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_CAN_MspInit+0xc0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4619      	mov	r1, r3
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <HAL_CAN_MspInit+0xc4>)
 8001156:	f001 fda9 	bl	8002cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <HAL_CAN_MspInit+0xc4>)
 8001170:	f001 fd9c 	bl	8002cac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2013      	movs	r0, #19
 800117a:	f001 fd60 	bl	8002c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800117e:	2013      	movs	r0, #19
 8001180:	f001 fd79 	bl	8002c76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2014      	movs	r0, #20
 800118a:	f001 fd58 	bl	8002c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800118e:	2014      	movs	r0, #20
 8001190:	f001 fd71 	bl	8002c76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2015      	movs	r0, #21
 800119a:	f001 fd50 	bl	8002c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800119e:	2015      	movs	r0, #21
 80011a0:	f001 fd69 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40006400 	.word	0x40006400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800

080011b8 <CanInit>:
/* USER CODE BEGIN 1 */

/************************************************************************************************
 FUNCTIONS CREATED OUTSIDE CUBEMX
 ************************************************************************************************/
void CanInit(CAN_HandleTypeDef hcanx) {
 80011b8:	b084      	sub	sp, #16
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
 80011be:	f107 0c08 	add.w	ip, r7, #8
 80011c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_Start(&hcanx) != HAL_OK) {
 80011c6:	f107 0008 	add.w	r0, r7, #8
 80011ca:	f001 f8bd 	bl	8002348 <HAL_CAN_Start>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <CanInit+0x20>
		Error_Handler();
 80011d4:	f000 fae7 	bl	80017a6 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcanx,
 80011d8:	2103      	movs	r1, #3
 80011da:	f107 0008 	add.w	r0, r7, #8
 80011de:	f001 fa05 	bl	80025ec <HAL_CAN_ActivateNotification>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <CanInit+0x34>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 80011e8:	f000 fadd 	bl	80017a6 <Error_Handler>
	}
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011f4:	b004      	add	sp, #16
 80011f6:	4770      	bx	lr

080011f8 <CanConfigFilter>:
 * @param can_filter_mask_id_high: High byte of CAN ID mask - IDs to be received
 * @param can_filter_mask_id_low: Low byte of CAN ID mask - IDs to be received
 */
void CanConfigFilter(CAN_HandleTypeDef hcanx, uint8_t can_filter_bank,
		uint32_t can_filter_id_high, uint32_t can_filter_id_low,
		uint32_t can_filter_mask_id_high, uint32_t can_filter_mask_id_low) {
 80011f8:	b084      	sub	sp, #16
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	f107 0c08 	add.w	ip, r7, #8
 8001202:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	can_filter_template.FilterBank = can_filter_bank;
 8001206:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <CanConfigFilter+0x6c>)
 800120c:	6153      	str	r3, [r2, #20]
	can_filter_template.FilterMode = CAN_FILTERMODE_IDMASK;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <CanConfigFilter+0x6c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
	can_filter_template.FilterScale = CAN_FILTERSCALE_32BIT;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <CanConfigFilter+0x6c>)
 8001216:	2201      	movs	r2, #1
 8001218:	61da      	str	r2, [r3, #28]
	can_filter_template.FilterIdHigh = can_filter_id_high; //18FF;			//0x321 << 5;
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <CanConfigFilter+0x6c>)
 800121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121e:	6013      	str	r3, [r2, #0]
	can_filter_template.FilterIdLow = can_filter_id_low; //50E5;				//0x00000000;
 8001220:	4a10      	ldr	r2, [pc, #64]	; (8001264 <CanConfigFilter+0x6c>)
 8001222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001224:	6053      	str	r3, [r2, #4]
	can_filter_template.FilterMaskIdHigh = can_filter_mask_id_high;	//0x111 << 5;
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <CanConfigFilter+0x6c>)
 8001228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800122a:	6093      	str	r3, [r2, #8]
	can_filter_template.FilterMaskIdLow = can_filter_mask_id_low;//0x00000000;
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <CanConfigFilter+0x6c>)
 800122e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001230:	60d3      	str	r3, [r2, #12]
	can_filter_template.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <CanConfigFilter+0x6c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
	can_filter_template.FilterActivation = ENABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <CanConfigFilter+0x6c>)
 800123a:	2201      	movs	r2, #1
 800123c:	621a      	str	r2, [r3, #32]
	can_filter_template.SlaveStartFilterBank = 14;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <CanConfigFilter+0x6c>)
 8001240:	220e      	movs	r2, #14
 8001242:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcanx, &can_filter_template) != HAL_OK) {
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <CanConfigFilter+0x6c>)
 8001246:	f107 0008 	add.w	r0, r7, #8
 800124a:	f000 ffb4 	bl	80021b6 <HAL_CAN_ConfigFilter>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <CanConfigFilter+0x60>
		Error_Handler();
 8001254:	f000 faa7 	bl	80017a6 <Error_Handler>
	}

}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001260:	b004      	add	sp, #16
 8001262:	4770      	bx	lr
 8001264:	20000138 	.word	0x20000138

08001268 <CAN_SEND_CURRENT>:
			can_rx_frame_template.tx_data, &can_tx_mailbox) != HAL_OK) {
		Error_Handler();
	}
}

void CAN_SEND_CURRENT(CAN_HandleTypeDef hcanx, int32_t data){
 8001268:	b084      	sub	sp, #16
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
 800126e:	f107 0c08 	add.w	ip, r7, #8
 8001272:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	can_frame_template.tx_header.StdId = 0x55;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 8001278:	2255      	movs	r2, #85	; 0x55
 800127a:	609a      	str	r2, [r3, #8]
	can_frame_template.tx_header.RTR = CAN_RTR_DATA;
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
	can_frame_template.tx_header.IDE = CAN_ID_STD;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
	can_frame_template.tx_header.DLC = 4;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 800128a:	2204      	movs	r2, #4
 800128c:	619a      	str	r2, [r3, #24]
	can_frame_template.tx_header.TransmitGlobalTime = DISABLE;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 8001290:	2200      	movs	r2, #0
 8001292:	771a      	strb	r2, [r3, #28]



	can_frame_template.tx_data[0] = (data >> 24) & 0xFF;
 8001294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001296:	0e1b      	lsrs	r3, r3, #24
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 800129c:	701a      	strb	r2, [r3, #0]
	can_frame_template.tx_data[1] = (data >> 16) & 0xFF;
 800129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a0:	141b      	asrs	r3, r3, #16
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 80012a6:	705a      	strb	r2, [r3, #1]
	can_frame_template.tx_data[2] = (data >> 8) & 0xFF;
 80012a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012aa:	121b      	asrs	r3, r3, #8
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 80012b0:	709a      	strb	r2, [r3, #2]
	can_frame_template.tx_data[3] = (data) & 0xFF;
 80012b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 80012b8:	70da      	strb	r2, [r3, #3]


	if (HAL_CAN_AddTxMessage(&hcanx, &can_frame_template.tx_header,
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <CAN_SEND_CURRENT+0x8c>)
 80012bc:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <CAN_SEND_CURRENT+0x88>)
 80012be:	490e      	ldr	r1, [pc, #56]	; (80012f8 <CAN_SEND_CURRENT+0x90>)
 80012c0:	f107 0008 	add.w	r0, r7, #8
 80012c4:	f001 f884 	bl	80023d0 <HAL_CAN_AddTxMessage>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <CAN_SEND_CURRENT+0x6a>
			can_frame_template.tx_data, &can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 80012ce:	f000 fa6a 	bl	80017a6 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcanx) != 3) {
 80012d2:	bf00      	nop
 80012d4:	f107 0008 	add.w	r0, r7, #8
 80012d8:	f001 f954 	bl	8002584 <HAL_CAN_GetTxMailboxesFreeLevel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d1f8      	bne.n	80012d4 <CAN_SEND_CURRENT+0x6c>

	}



}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ec:	b004      	add	sp, #16
 80012ee:	4770      	bx	lr
 80012f0:	200000e8 	.word	0x200000e8
 80012f4:	200000c8 	.word	0x200000c8
 80012f8:	200000f0 	.word	0x200000f0

080012fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <MX_GPIO_Init+0x98>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <MX_GPIO_Init+0x98>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_GPIO_Init+0x98>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_GPIO_Init+0x98>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <MX_GPIO_Init+0x98>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_GPIO_Init+0x98>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_RS_GPIO_Port, CAN_RS_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <MX_GPIO_Init+0x9c>)
 8001346:	f001 fe35 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2103      	movs	r1, #3
 800134e:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_GPIO_Init+0xa0>)
 8001350:	f001 fe30 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_RS_Pin;
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2302      	movs	r3, #2
 8001362:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAN_RS_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <MX_GPIO_Init+0x9c>)
 800136c:	f001 fc9e 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001370:	2303      	movs	r3, #3
 8001372:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2302      	movs	r3, #2
 800137e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4619      	mov	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_GPIO_Init+0xa0>)
 8001388:	f001 fc90 	bl	8002cac <HAL_GPIO_Init>

}
 800138c:	bf00      	nop
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00

080013a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <MX_I2C1_Init+0x54>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_I2C1_Init+0x58>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013de:	f001 fe1b 	bl	8003018 <HAL_I2C_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e8:	f000 f9dd 	bl	80017a6 <Error_Handler>
  }

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000190 	.word	0x20000190
 80013f4:	40005400 	.word	0x40005400
 80013f8:	000186a0 	.word	0x000186a0

080013fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_I2C_MspInit+0x90>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d132      	bne.n	8001482 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_I2C_MspInit+0x94>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_I2C_MspInit+0x94>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_I2C_MspInit+0x94>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001434:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143a:	2312      	movs	r3, #18
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <HAL_I2C_MspInit+0x98>)
 800144a:	f001 fc2f 	bl	8002cac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_I2C_MspInit+0x9c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <HAL_I2C_MspInit+0x9c>)
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_I2C_MspInit+0x94>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_I2C_MspInit+0x94>)
 8001470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_I2C_MspInit+0x94>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40005400 	.word	0x40005400
 8001490:	40021000 	.word	0x40021000
 8001494:	40010c00 	.word	0x40010c00
 8001498:	40010000 	.word	0x40010000
 800149c:	00000000 	.word	0x00000000

080014a0 <LTC_get_Current>:
#define SLOW   0b00000000 // slow output rate with autozero
#define FAST   0b00000001 // fast output rate with no autozero

extern I2C_HandleTypeDef hi2c1;

int32_t LTC_get_Current(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af02      	add	r7, sp, #8

	uint8_t buf[8];

	HAL_I2C_Master_Receive(&hi2c1, LTC248XADDR | 1, &buf,4, HAL_MAX_DELAY);
 80014a6:	463a      	mov	r2, r7
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2304      	movs	r3, #4
 80014b0:	2149      	movs	r1, #73	; 0x49
 80014b2:	4839      	ldr	r0, [pc, #228]	; (8001598 <LTC_get_Current+0xf8>)
 80014b4:	f001 fff2 	bl	800349c <HAL_I2C_Master_Receive>

	int32_t x = (buf[0])<<24 | buf[1]<<16 | buf[2]<<8 | (buf[3] & 0b11000000);
 80014b8:	783b      	ldrb	r3, [r7, #0]
 80014ba:	061a      	lsls	r2, r3, #24
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	041b      	lsls	r3, r3, #16
 80014c0:	431a      	orrs	r2, r3
 80014c2:	78bb      	ldrb	r3, [r7, #2]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	431a      	orrs	r2, r3
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
	x ^= 0x80000000;
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80014d8:	613b      	str	r3, [r7, #16]

	const float Vref = 4090;
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <LTC_get_Current+0xfc>)
 80014dc:	60fb      	str	r3, [r7, #12]
	float voltage = (float) x;
 80014de:	6938      	ldr	r0, [r7, #16]
 80014e0:	f7ff fb16 	bl	8000b10 <__aeabi_i2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	60bb      	str	r3, [r7, #8]
	voltage = voltage * Vref / 2147483648.0; //  voltage * Vref_in_mV / 2^31;
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f7ff fb64 	bl	8000bb8 <__aeabi_fmul>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc12 	bl	8000d20 <__aeabi_fdiv>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60bb      	str	r3, [r7, #8]

	float current = voltage / (20 * 0.001); //  voltage / (GAIN * Rshunt) ;
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f7fe ff91 	bl	8000428 <__aeabi_f2d>
 8001506:	a320      	add	r3, pc, #128	; (adr r3, 8001588 <LTC_get_Current+0xe8>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f90e 	bl	800072c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff f9f0 	bl	80008fc <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	617b      	str	r3, [r7, #20]
	current *=1.006; //gain calibration
 8001520:	6978      	ldr	r0, [r7, #20]
 8001522:	f7fe ff81 	bl	8000428 <__aeabi_f2d>
 8001526:	a31a      	add	r3, pc, #104	; (adr r3, 8001590 <LTC_get_Current+0xf0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7fe ffd4 	bl	80004d8 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff f9e0 	bl	80008fc <__aeabi_d2f>
 800153c:	4603      	mov	r3, r0
 800153e:	617b      	str	r3, [r7, #20]
	current += 25; //offest calibration
 8001540:	4917      	ldr	r1, [pc, #92]	; (80015a0 <LTC_get_Current+0x100>)
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff fa30 	bl	80009a8 <__addsf3>
 8001548:	4603      	mov	r3, r0
 800154a:	617b      	str	r3, [r7, #20]
	//if(current<50 && current>-50)current = 0;// elminate small drift
	if(fabsf(current)<50)current = 0;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001552:	4914      	ldr	r1, [pc, #80]	; (80015a4 <LTC_get_Current+0x104>)
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fccd 	bl	8000ef4 <__aeabi_fcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <LTC_get_Current+0xc6>
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
	current += 0.5; //to round number
 8001566:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff fa1c 	bl	80009a8 <__addsf3>
 8001570:	4603      	mov	r3, r0
 8001572:	617b      	str	r3, [r7, #20]

	return (int32_t)current;
 8001574:	6978      	ldr	r0, [r7, #20]
 8001576:	f7ff fce5 	bl	8000f44 <__aeabi_f2iz>
 800157a:	4603      	mov	r3, r0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	f3af 8000 	nop.w
 8001588:	47ae147b 	.word	0x47ae147b
 800158c:	3f947ae1 	.word	0x3f947ae1
 8001590:	74bc6a7f 	.word	0x74bc6a7f
 8001594:	3ff01893 	.word	0x3ff01893
 8001598:	20000190 	.word	0x20000190
 800159c:	457fa000 	.word	0x457fa000
 80015a0:	41c80000 	.word	0x41c80000
 80015a4:	42480000 	.word	0x42480000

080015a8 <LTC_init>:



void LTC_init(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af02      	add	r7, sp, #8
	int8_t config = VIN | R50 | SLOW;
 80015ae:	2302      	movs	r3, #2
 80015b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, LTC248XADDR, &config, 1, HAL_MAX_DELAY);
 80015b2:	1dfa      	adds	r2, r7, #7
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2301      	movs	r3, #1
 80015bc:	2148      	movs	r1, #72	; 0x48
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <LTC_init+0x38>)
 80015c0:	f001 fe6e 	bl	80032a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, LTC248XADDR, &config, 1, HAL_MAX_DELAY);\
 80015c4:	1dfa      	adds	r2, r7, #7
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	2148      	movs	r1, #72	; 0x48
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <LTC_init+0x38>)
 80015d2:	f001 fe65 	bl	80032a0 <HAL_I2C_Master_Transmit>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000190 	.word	0x20000190

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e6:	b093      	sub	sp, #76	; 0x4c
 80015e8:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ea:	f000 fa59 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ee:	f000 f883 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f2:	f7ff fe83 	bl	80012fc <MX_GPIO_Init>
  MX_ADC1_Init();
 80015f6:	f7ff fccb 	bl	8000f90 <MX_ADC1_Init>
  MX_CAN_Init();
 80015fa:	f7ff fd43 	bl	8001084 <MX_CAN_Init>
  MX_I2C1_Init();
 80015fe:	f7ff fecf 	bl	80013a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001602:	f000 f9b1 	bl	8001968 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	LTC_init();
 8001606:	f7ff ffcf 	bl	80015a8 <LTC_init>

	// set RS pin on CAN transiver
	HAL_GPIO_WritePin(CAN_RS_GPIO_Port, CAN_RS_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	4834      	ldr	r0, [pc, #208]	; (80016e0 <main+0xfc>)
 8001610:	f001 fcd0 	bl	8002fb4 <HAL_GPIO_WritePin>


	CanConfigFilter(hcan, 1, 0x0000, 0x0000, 0x0000, 0x0000);
 8001614:	4e33      	ldr	r6, [pc, #204]	; (80016e4 <main+0x100>)
 8001616:	2300      	movs	r3, #0
 8001618:	930a      	str	r3, [sp, #40]	; 0x28
 800161a:	2300      	movs	r3, #0
 800161c:	9309      	str	r3, [sp, #36]	; 0x24
 800161e:	2300      	movs	r3, #0
 8001620:	9308      	str	r3, [sp, #32]
 8001622:	2300      	movs	r3, #0
 8001624:	9307      	str	r3, [sp, #28]
 8001626:	2301      	movs	r3, #1
 8001628:	9306      	str	r3, [sp, #24]
 800162a:	466d      	mov	r5, sp
 800162c:	f106 0410 	add.w	r4, r6, #16
 8001630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001638:	e885 0003 	stmia.w	r5, {r0, r1}
 800163c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001640:	f7ff fdda 	bl	80011f8 <CanConfigFilter>
	CanInit(hcan);
 8001644:	4e27      	ldr	r6, [pc, #156]	; (80016e4 <main+0x100>)
 8001646:	466d      	mov	r5, sp
 8001648:	f106 0410 	add.w	r4, r6, #16
 800164c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001650:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001654:	e885 0003 	stmia.w	r5, {r0, r1}
 8001658:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800165c:	f7ff fdac 	bl	80011b8 <CanInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001660:	2101      	movs	r1, #1
 8001662:	4821      	ldr	r0, [pc, #132]	; (80016e8 <main+0x104>)
 8001664:	f001 fcbe 	bl	8002fe4 <HAL_GPIO_TogglePin>

		current = LTC_get_Current();
 8001668:	f7ff ff1a 	bl	80014a0 <LTC_get_Current>
 800166c:	4603      	mov	r3, r0
 800166e:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <main+0x108>)
 8001670:	6013      	str	r3, [r2, #0]

		char data_to_send[20];
		for(int i=0;i<20;i++)data_to_send[i] = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e007      	b.n	8001688 <main+0xa4>
 8001678:	463a      	mov	r2, r7
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	4413      	add	r3, r2
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b13      	cmp	r3, #19
 800168c:	ddf4      	ble.n	8001678 <main+0x94>

		sprintf((char*)data_to_send, "%d \n", (int32_t)current );
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <main+0x108>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	463b      	mov	r3, r7
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <main+0x10c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f003 fb46 	bl	8004d28 <siprintf>
		HAL_UART_Transmit(&huart1,&data_to_send, strlen(data_to_send),HAL_MAX_DELAY);
 800169c:	463b      	mov	r3, r7
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fd56 	bl	8000150 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4639      	mov	r1, r7
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	4811      	ldr	r0, [pc, #68]	; (80016f4 <main+0x110>)
 80016b0:	f003 f99d 	bl	80049ee <HAL_UART_Transmit>

		CAN_SEND_CURRENT(hcan,(int32_t)current);
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <main+0x108>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4e0a      	ldr	r6, [pc, #40]	; (80016e4 <main+0x100>)
 80016ba:	9306      	str	r3, [sp, #24]
 80016bc:	466d      	mov	r5, sp
 80016be:	f106 0410 	add.w	r4, r6, #16
 80016c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016d2:	f7ff fdc9 	bl	8001268 <CAN_SEND_CURRENT>

		HAL_Delay(160);
 80016d6:	20a0      	movs	r0, #160	; 0xa0
 80016d8:	f000 fa44 	bl	8001b64 <HAL_Delay>
	{
 80016dc:	e7c0      	b.n	8001660 <main+0x7c>
 80016de:	bf00      	nop
 80016e0:	40010800 	.word	0x40010800
 80016e4:	20000110 	.word	0x20000110
 80016e8:	40010c00 	.word	0x40010c00
 80016ec:	200001e4 	.word	0x200001e4
 80016f0:	080055b4 	.word	0x080055b4
 80016f4:	200001e8 	.word	0x200001e8

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b094      	sub	sp, #80	; 0x50
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001702:	2228      	movs	r2, #40	; 0x28
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fb06 	bl	8004d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001728:	2302      	movs	r3, #2
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172c:	2301      	movs	r3, #1
 800172e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001730:	2310      	movs	r3, #16
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001734:	2302      	movs	r3, #2
 8001736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001738:	2300      	movs	r3, #0
 800173a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800173c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fc34 	bl	8003fb4 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001752:	f000 f828 	bl	80017a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001766:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fe9e 	bl	80044b4 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800177e:	f000 f812 	bl	80017a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001782:	2302      	movs	r3, #2
 8001784:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001786:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800178a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4618      	mov	r0, r3
 8001790:	f003 f82a 	bl	80047e8 <HAL_RCCEx_PeriphCLKConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800179a:	f000 f804 	bl	80017a6 <Error_Handler>
  }
}
 800179e:	bf00      	nop
 80017a0:	3750      	adds	r7, #80	; 0x50
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
	...

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_MspInit+0x5c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_MspInit+0x5c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_MspInit+0x5c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_MspInit+0x5c>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_MspInit+0x5c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_MspInit+0x5c>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_MspInit+0x60>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_MspInit+0x60>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <HardFault_Handler+0x4>

0800182a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <MemManage_Handler+0x4>

08001830 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <BusFault_Handler+0x4>

08001836 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <UsageFault_Handler+0x4>

0800183c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 f962 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001872:	f000 fee0 	bl	8002636 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000110 	.word	0x20000110

08001880 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001886:	f000 fed6 	bl	8002636 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000110 	.word	0x20000110

08001894 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <CAN1_RX1_IRQHandler+0x10>)
 800189a:	f000 fecc 	bl	8002636 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000110 	.word	0x20000110

080018a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <_sbrk+0x50>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x16>
		heap_end = &end;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <_sbrk+0x50>)
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <_sbrk+0x54>)
 80018bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <_sbrk+0x50>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <_sbrk+0x50>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	466a      	mov	r2, sp
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d907      	bls.n	80018e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018d2:	f003 f9f7 	bl	8004cc4 <__errno>
 80018d6:	4603      	mov	r3, r0
 80018d8:	220c      	movs	r2, #12
 80018da:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	e006      	b.n	80018f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <_sbrk+0x50>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <_sbrk+0x50>)
 80018ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000008c 	.word	0x2000008c
 80018fc:	20000240 	.word	0x20000240

08001900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <SystemInit+0x5c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <SystemInit+0x5c>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <SystemInit+0x5c>)
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4911      	ldr	r1, [pc, #68]	; (800195c <SystemInit+0x5c>)
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <SystemInit+0x60>)
 8001918:	4013      	ands	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <SystemInit+0x5c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0e      	ldr	r2, [pc, #56]	; (800195c <SystemInit+0x5c>)
 8001922:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <SystemInit+0x5c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <SystemInit+0x5c>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <SystemInit+0x5c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <SystemInit+0x5c>)
 800193e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001942:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SystemInit+0x5c>)
 8001946:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800194a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <SystemInit+0x64>)
 800194e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001952:	609a      	str	r2, [r3, #8]
#endif 
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	40021000 	.word	0x40021000
 8001960:	f8ff0000 	.word	0xf8ff0000
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_USART1_UART_Init+0x4c>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <MX_USART1_UART_Init+0x50>)
 8001970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_USART1_UART_Init+0x4c>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_USART1_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_USART1_UART_Init+0x4c>)
 80019a0:	f002 ffd8 	bl	8004954 <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019aa:	f7ff fefc 	bl	80017a6 <Error_Handler>
  }

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001e8 	.word	0x200001e8
 80019b8:	40013800 	.word	0x40013800

080019bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_UART_MspInit+0x8c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d131      	bne.n	8001a40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_UART_MspInit+0x90>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <HAL_UART_MspInit+0x90>)
 80019e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_UART_MspInit+0x90>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_UART_MspInit+0x90>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <HAL_UART_MspInit+0x90>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_UART_MspInit+0x90>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <HAL_UART_MspInit+0x94>)
 8001a22:	f001 f943 	bl	8002cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_UART_MspInit+0x94>)
 8001a3c:	f001 f936 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40013800 	.word	0x40013800
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010800 	.word	0x40010800

08001a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a56:	e003      	b.n	8001a60 <LoopCopyDataInit>

08001a58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a5e:	3104      	adds	r1, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a68:	d3f6      	bcc.n	8001a58 <CopyDataInit>
  ldr r2, =_sbss
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a6c:	e002      	b.n	8001a74 <LoopFillZerobss>

08001a6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a70:	f842 3b04 	str.w	r3, [r2], #4

08001a74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a78:	d3f9      	bcc.n	8001a6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a7a:	f7ff ff41 	bl	8001900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f003 f927 	bl	8004cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a82:	f7ff fdaf 	bl	80015e4 <main>
  bx lr
 8001a86:	4770      	bx	lr
  ldr r3, =_sidata
 8001a88:	08005620 	.word	0x08005620
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a90:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001a94:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001a98:	2000023c 	.word	0x2000023c

08001a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC1_2_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_Init+0x28>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_Init+0x28>)
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f001 f8b9 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 f808 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff fe7a 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 f8d1 	bl	8002c92 <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f001 f899 	bl	8002c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_IncTick+0x1c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_IncTick+0x20>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <HAL_IncTick+0x20>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000228 	.word	0x20000228

08001b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b02      	ldr	r3, [pc, #8]	; (8001b60 <HAL_GetTick+0x10>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	20000228 	.word	0x20000228

08001b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d005      	beq.n	8001b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_Delay+0x44>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8a:	bf00      	nop
 8001b8c:	f7ff ffe0 	bl	8001b50 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d8f7      	bhi.n	8001b8c <HAL_Delay+0x28>
  {
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008

08001bac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0be      	b.n	8001d4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fa0e 	bl	800100c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f9ab 	bl	8001f4c <ADC_ConversionStop_Disable>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 8099 	bne.w	8001d3a <HAL_ADC_Init+0x18e>
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 8095 	bne.w	8001d3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c18:	f023 0302 	bic.w	r3, r3, #2
 8001c1c:	f043 0202 	orr.w	r2, r3, #2
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7b1b      	ldrb	r3, [r3, #12]
 8001c32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c44:	d003      	beq.n	8001c4e <HAL_ADC_Init+0xa2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <HAL_ADC_Init+0xa8>
 8001c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c52:	e000      	b.n	8001c56 <HAL_ADC_Init+0xaa>
 8001c54:	2300      	movs	r3, #0
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7d1b      	ldrb	r3, [r3, #20]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d119      	bne.n	8001c98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7b1b      	ldrb	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	035a      	lsls	r2, r3, #13
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	e00b      	b.n	8001c98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_ADC_Init+0x1a8>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc8:	d003      	beq.n	8001cd2 <HAL_ADC_Init+0x126>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d104      	bne.n	8001cdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	051b      	lsls	r3, r3, #20
 8001cda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_ADC_Init+0x1ac>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10b      	bne.n	8001d18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d16:	e018      	b.n	8001d4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f023 0312 	bic.w	r3, r3, #18
 8001d20:	f043 0210 	orr.w	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d38:	e007      	b.n	8001d4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	f043 0210 	orr.w	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	ffe1f7fd 	.word	0xffe1f7fd
 8001d58:	ff1f0efe 	.word	0xff1f0efe

08001d5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x20>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e0dc      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1da>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d81c      	bhi.n	8001dc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b05      	subs	r3, #5
 8001d9e:	221f      	movs	r2, #31
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4019      	ands	r1, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b05      	subs	r3, #5
 8001db8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc4:	e03c      	b.n	8001e40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d81c      	bhi.n	8001e08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b23      	subs	r3, #35	; 0x23
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4019      	ands	r1, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	3b23      	subs	r3, #35	; 0x23
 8001dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
 8001e06:	e01b      	b.n	8001e40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	3b41      	subs	r3, #65	; 0x41
 8001e1a:	221f      	movs	r2, #31
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4019      	ands	r1, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b41      	subs	r3, #65	; 0x41
 8001e34:	fa00 f203 	lsl.w	r2, r0, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	d91c      	bls.n	8001e82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68d9      	ldr	r1, [r3, #12]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	3b1e      	subs	r3, #30
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4019      	ands	r1, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6898      	ldr	r0, [r3, #8]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	3b1e      	subs	r3, #30
 8001e74:	fa00 f203 	lsl.w	r2, r0, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	e019      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6919      	ldr	r1, [r3, #16]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	2207      	movs	r2, #7
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4019      	ands	r1, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6898      	ldr	r0, [r3, #8]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d003      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ec2:	2b11      	cmp	r3, #17
 8001ec4:	d132      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d125      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d126      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001eec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d11a      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <HAL_ADC_ConfigChannel+0x1ec>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	0c9a      	lsrs	r2, r3, #18
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x1b2>
 8001f1a:	e007      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f043 0220 	orr.w	r2, r3, #32
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	40012400 	.word	0x40012400
 8001f44:	20000000 	.word	0x20000000
 8001f48:	431bde83 	.word	0x431bde83

08001f4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d127      	bne.n	8001fb6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f76:	f7ff fdeb 	bl	8001b50 <HAL_GetTick>
 8001f7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f7c:	e014      	b.n	8001fa8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f7e:	f7ff fde7 	bl	8001b50 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d90d      	bls.n	8001fa8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	f043 0210 	orr.w	r2, r3, #16
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e007      	b.n	8001fb8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d0e3      	beq.n	8001f7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0ed      	b.n	80021ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff f886 	bl	80010f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0202 	bic.w	r2, r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff4:	f7ff fdac 	bl	8001b50 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ffa:	e012      	b.n	8002022 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ffc:	f7ff fda8 	bl	8001b50 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b0a      	cmp	r3, #10
 8002008:	d90b      	bls.n	8002022 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2205      	movs	r2, #5
 800201a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0c5      	b.n	80021ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e5      	bne.n	8001ffc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff fd86 	bl	8001b50 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002046:	e012      	b.n	800206e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002048:	f7ff fd82 	bl	8001b50 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b0a      	cmp	r3, #10
 8002054:	d90b      	bls.n	800206e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e09f      	b.n	80021ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0e5      	beq.n	8002048 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7e1b      	ldrb	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d108      	bne.n	8002096 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e007      	b.n	80020a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7e5b      	ldrb	r3, [r3, #25]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e007      	b.n	80020d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7e9b      	ldrb	r3, [r3, #26]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e007      	b.n	80020fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0220 	bic.w	r2, r2, #32
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7edb      	ldrb	r3, [r3, #27]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0210 	bic.w	r2, r2, #16
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e007      	b.n	8002124 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0210 	orr.w	r2, r2, #16
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7f1b      	ldrb	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d108      	bne.n	800213e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0208 	orr.w	r2, r2, #8
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e007      	b.n	800214e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0208 	bic.w	r2, r2, #8
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7f5b      	ldrb	r3, [r3, #29]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d108      	bne.n	8002168 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0204 	orr.w	r2, r2, #4
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e007      	b.n	8002178 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	ea42 0103 	orr.w	r1, r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021cc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d003      	beq.n	80021dc <HAL_CAN_ConfigFilter+0x26>
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	f040 80aa 	bne.w	8002330 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2201      	movs	r2, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d123      	bne.n	800225e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	43db      	mvns	r3, r3
 8002220:	401a      	ands	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002238:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3248      	adds	r2, #72	; 0x48
 800223e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002252:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002254:	6979      	ldr	r1, [r7, #20]
 8002256:	3348      	adds	r3, #72	; 0x48
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d122      	bne.n	80022ac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	431a      	orrs	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002286:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3248      	adds	r2, #72	; 0x48
 800228c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022a2:	6979      	ldr	r1, [r7, #20]
 80022a4:	3348      	adds	r3, #72	; 0x48
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80022c6:	e007      	b.n	80022d8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80022f2:	e007      	b.n	8002304 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002322:	f023 0201 	bic.w	r2, r3, #1
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	e006      	b.n	800233e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
  }
}
 800233e:	4618      	mov	r0, r3
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d12e      	bne.n	80023ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002374:	f7ff fbec 	bl	8001b50 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800237a:	e012      	b.n	80023a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800237c:	f7ff fbe8 	bl	8001b50 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b0a      	cmp	r3, #10
 8002388:	d90b      	bls.n	80023a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e012      	b.n	80023c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e5      	bne.n	800237c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e006      	b.n	80023c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
  }
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ee:	7ffb      	ldrb	r3, [r7, #31]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d003      	beq.n	80023fc <HAL_CAN_AddTxMessage+0x2c>
 80023f4:	7ffb      	ldrb	r3, [r7, #31]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	f040 80b8 	bne.w	800256c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80a0 	beq.w	800255c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	0e1b      	lsrs	r3, r3, #24
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d907      	bls.n	800243c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e09e      	b.n	800257a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800243c:	2201      	movs	r2, #1
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	409a      	lsls	r2, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002458:	68f9      	ldr	r1, [r7, #12]
 800245a:	6809      	ldr	r1, [r1, #0]
 800245c:	431a      	orrs	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3318      	adds	r3, #24
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	440b      	add	r3, r1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e00f      	b.n	800248a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002474:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800247a:	68f9      	ldr	r1, [r7, #12]
 800247c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800247e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3318      	adds	r3, #24
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	440b      	add	r3, r1
 8002488:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3318      	adds	r3, #24
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	440b      	add	r3, r1
 800249a:	3304      	adds	r3, #4
 800249c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	7d1b      	ldrb	r3, [r3, #20]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d111      	bne.n	80024ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3318      	adds	r3, #24
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	3304      	adds	r3, #4
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	6811      	ldr	r1, [r2, #0]
 80024ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3318      	adds	r3, #24
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	440b      	add	r3, r1
 80024c6:	3304      	adds	r3, #4
 80024c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3307      	adds	r3, #7
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	061a      	lsls	r2, r3, #24
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3306      	adds	r3, #6
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3305      	adds	r3, #5
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	4313      	orrs	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	3204      	adds	r2, #4
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	4610      	mov	r0, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	ea43 0200 	orr.w	r2, r3, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	440b      	add	r3, r1
 80024fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002500:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3303      	adds	r3, #3
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	061a      	lsls	r2, r3, #24
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3301      	adds	r3, #1
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	4313      	orrs	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	4610      	mov	r0, r2
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	6811      	ldr	r1, [r2, #0]
 8002528:	ea43 0200 	orr.w	r2, r3, r0
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	440b      	add	r3, r1
 8002532:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002536:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3318      	adds	r3, #24
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	4413      	add	r3, r2
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	6811      	ldr	r1, [r2, #0]
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3318      	adds	r3, #24
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	440b      	add	r3, r1
 8002556:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e00e      	b.n	800257a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e006      	b.n	800257a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002596:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002598:	7afb      	ldrb	r3, [r7, #11]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d002      	beq.n	80025a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d11d      	bne.n	80025e0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3301      	adds	r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3301      	adds	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d002      	beq.n	800260a <HAL_CAN_ActivateNotification+0x1e>
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d109      	bne.n	800261e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6959      	ldr	r1, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e006      	b.n	800262c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b08a      	sub	sp, #40	; 0x28
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d07c      	beq.n	8002776 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d023      	beq.n	80026ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2201      	movs	r2, #1
 800268c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f983 	bl	80029a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800269e:	e016      	b.n	80026ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d004      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
 80026b2:	e00c      	b.n	80026ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	e002      	b.n	80026ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f986 	bl	80029da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d024      	beq.n	8002722 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f962 	bl	80029b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80026f2:	e016      	b.n	8002722 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d004      	beq.n	8002708 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	e00c      	b.n	8002722 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
 800271a:	e002      	b.n	8002722 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f965 	bl	80029ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d024      	beq.n	8002776 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002734:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f941 	bl	80029c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002746:	e016      	b.n	8002776 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	e00c      	b.n	8002776 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
 800276e:	e002      	b.n	8002776 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f944 	bl	80029fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00c      	beq.n	800279a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002790:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2210      	movs	r2, #16
 8002798:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2208      	movs	r2, #8
 80027b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f933 	bl	8002a22 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f91b 	bl	8002a10 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2210      	movs	r2, #16
 80027fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00b      	beq.n	8002820 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2208      	movs	r2, #8
 8002818:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f913 	bl	8002a46 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8fb 	bl	8002a34 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8fc 	bl	8002a58 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2208      	movs	r2, #8
 800287a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f8f4 	bl	8002a6a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d07b      	beq.n	8002984 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d072      	beq.n	800297c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d043      	beq.n	800297c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d03e      	beq.n	800297c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002904:	2b60      	cmp	r3, #96	; 0x60
 8002906:	d02b      	beq.n	8002960 <HAL_CAN_IRQHandler+0x32a>
 8002908:	2b60      	cmp	r3, #96	; 0x60
 800290a:	d82e      	bhi.n	800296a <HAL_CAN_IRQHandler+0x334>
 800290c:	2b50      	cmp	r3, #80	; 0x50
 800290e:	d022      	beq.n	8002956 <HAL_CAN_IRQHandler+0x320>
 8002910:	2b50      	cmp	r3, #80	; 0x50
 8002912:	d82a      	bhi.n	800296a <HAL_CAN_IRQHandler+0x334>
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d019      	beq.n	800294c <HAL_CAN_IRQHandler+0x316>
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d826      	bhi.n	800296a <HAL_CAN_IRQHandler+0x334>
 800291c:	2b30      	cmp	r3, #48	; 0x30
 800291e:	d010      	beq.n	8002942 <HAL_CAN_IRQHandler+0x30c>
 8002920:	2b30      	cmp	r3, #48	; 0x30
 8002922:	d822      	bhi.n	800296a <HAL_CAN_IRQHandler+0x334>
 8002924:	2b10      	cmp	r3, #16
 8002926:	d002      	beq.n	800292e <HAL_CAN_IRQHandler+0x2f8>
 8002928:	2b20      	cmp	r3, #32
 800292a:	d005      	beq.n	8002938 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800292c:	e01d      	b.n	800296a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	f043 0308 	orr.w	r3, r3, #8
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002936:	e019      	b.n	800296c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f043 0310 	orr.w	r3, r3, #16
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002940:	e014      	b.n	800296c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f043 0320 	orr.w	r3, r3, #32
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800294a:	e00f      	b.n	800296c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002954:	e00a      	b.n	800296c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800295e:	e005      	b.n	800296c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002968:	e000      	b.n	800296c <HAL_CAN_IRQHandler+0x336>
            break;
 800296a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800297a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2204      	movs	r2, #4
 8002982:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f870 	bl	8002a7c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800299c:	bf00      	nop
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
	...

08002a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db0b      	blt.n	8002b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4906      	ldr	r1, [pc, #24]	; (8002b28 <__NVIC_EnableIRQ+0x34>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2001      	movs	r0, #1
 8002b16:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	; (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f7ff ff90 	bl	8002b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff2d 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff42 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff90 	bl	8002b80 <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5f 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff35 	bl	8002af4 <__NVIC_EnableIRQ>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ffa2 	bl	8002be4 <SysTick_Config>
 8002ca0:	4603      	mov	r3, r0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b08b      	sub	sp, #44	; 0x2c
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cbe:	e169      	b.n	8002f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f040 8158 	bne.w	8002f8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4a9a      	ldr	r2, [pc, #616]	; (8002f4c <HAL_GPIO_Init+0x2a0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d05e      	beq.n	8002da6 <HAL_GPIO_Init+0xfa>
 8002ce8:	4a98      	ldr	r2, [pc, #608]	; (8002f4c <HAL_GPIO_Init+0x2a0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d875      	bhi.n	8002dda <HAL_GPIO_Init+0x12e>
 8002cee:	4a98      	ldr	r2, [pc, #608]	; (8002f50 <HAL_GPIO_Init+0x2a4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d058      	beq.n	8002da6 <HAL_GPIO_Init+0xfa>
 8002cf4:	4a96      	ldr	r2, [pc, #600]	; (8002f50 <HAL_GPIO_Init+0x2a4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d86f      	bhi.n	8002dda <HAL_GPIO_Init+0x12e>
 8002cfa:	4a96      	ldr	r2, [pc, #600]	; (8002f54 <HAL_GPIO_Init+0x2a8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d052      	beq.n	8002da6 <HAL_GPIO_Init+0xfa>
 8002d00:	4a94      	ldr	r2, [pc, #592]	; (8002f54 <HAL_GPIO_Init+0x2a8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d869      	bhi.n	8002dda <HAL_GPIO_Init+0x12e>
 8002d06:	4a94      	ldr	r2, [pc, #592]	; (8002f58 <HAL_GPIO_Init+0x2ac>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d04c      	beq.n	8002da6 <HAL_GPIO_Init+0xfa>
 8002d0c:	4a92      	ldr	r2, [pc, #584]	; (8002f58 <HAL_GPIO_Init+0x2ac>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d863      	bhi.n	8002dda <HAL_GPIO_Init+0x12e>
 8002d12:	4a92      	ldr	r2, [pc, #584]	; (8002f5c <HAL_GPIO_Init+0x2b0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d046      	beq.n	8002da6 <HAL_GPIO_Init+0xfa>
 8002d18:	4a90      	ldr	r2, [pc, #576]	; (8002f5c <HAL_GPIO_Init+0x2b0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d85d      	bhi.n	8002dda <HAL_GPIO_Init+0x12e>
 8002d1e:	2b12      	cmp	r3, #18
 8002d20:	d82a      	bhi.n	8002d78 <HAL_GPIO_Init+0xcc>
 8002d22:	2b12      	cmp	r3, #18
 8002d24:	d859      	bhi.n	8002dda <HAL_GPIO_Init+0x12e>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <HAL_GPIO_Init+0x80>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002da7 	.word	0x08002da7
 8002d30:	08002d81 	.word	0x08002d81
 8002d34:	08002d93 	.word	0x08002d93
 8002d38:	08002dd5 	.word	0x08002dd5
 8002d3c:	08002ddb 	.word	0x08002ddb
 8002d40:	08002ddb 	.word	0x08002ddb
 8002d44:	08002ddb 	.word	0x08002ddb
 8002d48:	08002ddb 	.word	0x08002ddb
 8002d4c:	08002ddb 	.word	0x08002ddb
 8002d50:	08002ddb 	.word	0x08002ddb
 8002d54:	08002ddb 	.word	0x08002ddb
 8002d58:	08002ddb 	.word	0x08002ddb
 8002d5c:	08002ddb 	.word	0x08002ddb
 8002d60:	08002ddb 	.word	0x08002ddb
 8002d64:	08002ddb 	.word	0x08002ddb
 8002d68:	08002ddb 	.word	0x08002ddb
 8002d6c:	08002ddb 	.word	0x08002ddb
 8002d70:	08002d89 	.word	0x08002d89
 8002d74:	08002d9d 	.word	0x08002d9d
 8002d78:	4a79      	ldr	r2, [pc, #484]	; (8002f60 <HAL_GPIO_Init+0x2b4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d7e:	e02c      	b.n	8002dda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	623b      	str	r3, [r7, #32]
          break;
 8002d86:	e029      	b.n	8002ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	623b      	str	r3, [r7, #32]
          break;
 8002d90:	e024      	b.n	8002ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	3308      	adds	r3, #8
 8002d98:	623b      	str	r3, [r7, #32]
          break;
 8002d9a:	e01f      	b.n	8002ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	330c      	adds	r3, #12
 8002da2:	623b      	str	r3, [r7, #32]
          break;
 8002da4:	e01a      	b.n	8002ddc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dae:	2304      	movs	r3, #4
 8002db0:	623b      	str	r3, [r7, #32]
          break;
 8002db2:	e013      	b.n	8002ddc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	611a      	str	r2, [r3, #16]
          break;
 8002dc6:	e009      	b.n	8002ddc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc8:	2308      	movs	r3, #8
 8002dca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	615a      	str	r2, [r3, #20]
          break;
 8002dd2:	e003      	b.n	8002ddc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	623b      	str	r3, [r7, #32]
          break;
 8002dd8:	e000      	b.n	8002ddc <HAL_GPIO_Init+0x130>
          break;
 8002dda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2bff      	cmp	r3, #255	; 0xff
 8002de0:	d801      	bhi.n	8002de6 <HAL_GPIO_Init+0x13a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	e001      	b.n	8002dea <HAL_GPIO_Init+0x13e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2bff      	cmp	r3, #255	; 0xff
 8002df0:	d802      	bhi.n	8002df8 <HAL_GPIO_Init+0x14c>
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	e002      	b.n	8002dfe <HAL_GPIO_Init+0x152>
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	3b08      	subs	r3, #8
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	210f      	movs	r1, #15
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	6a39      	ldr	r1, [r7, #32]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80b1 	beq.w	8002f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e2c:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <HAL_GPIO_Init+0x2b8>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4a4c      	ldr	r2, [pc, #304]	; (8002f64 <HAL_GPIO_Init+0x2b8>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6193      	str	r3, [r2, #24]
 8002e38:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_GPIO_Init+0x2b8>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e44:	4a48      	ldr	r2, [pc, #288]	; (8002f68 <HAL_GPIO_Init+0x2bc>)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4013      	ands	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a40      	ldr	r2, [pc, #256]	; (8002f6c <HAL_GPIO_Init+0x2c0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <HAL_GPIO_Init+0x1ec>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3f      	ldr	r2, [pc, #252]	; (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00d      	beq.n	8002e94 <HAL_GPIO_Init+0x1e8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3e      	ldr	r2, [pc, #248]	; (8002f74 <HAL_GPIO_Init+0x2c8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <HAL_GPIO_Init+0x1e4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3d      	ldr	r2, [pc, #244]	; (8002f78 <HAL_GPIO_Init+0x2cc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d101      	bne.n	8002e8c <HAL_GPIO_Init+0x1e0>
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e006      	b.n	8002e9a <HAL_GPIO_Init+0x1ee>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	e004      	b.n	8002e9a <HAL_GPIO_Init+0x1ee>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e002      	b.n	8002e9a <HAL_GPIO_Init+0x1ee>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_GPIO_Init+0x1ee>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	f002 0203 	and.w	r2, r2, #3
 8002ea0:	0092      	lsls	r2, r2, #2
 8002ea2:	4093      	lsls	r3, r2
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002eaa:	492f      	ldr	r1, [pc, #188]	; (8002f68 <HAL_GPIO_Init+0x2bc>)
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d006      	beq.n	8002ed2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	492c      	ldr	r1, [pc, #176]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	4928      	ldr	r1, [pc, #160]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4922      	ldr	r1, [pc, #136]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
 8002ef8:	e006      	b.n	8002f08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	491e      	ldr	r1, [pc, #120]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4918      	ldr	r1, [pc, #96]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	4914      	ldr	r1, [pc, #80]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d021      	beq.n	8002f80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	490e      	ldr	r1, [pc, #56]	; (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60cb      	str	r3, [r1, #12]
 8002f48:	e021      	b.n	8002f8e <HAL_GPIO_Init+0x2e2>
 8002f4a:	bf00      	nop
 8002f4c:	10320000 	.word	0x10320000
 8002f50:	10310000 	.word	0x10310000
 8002f54:	10220000 	.word	0x10220000
 8002f58:	10210000 	.word	0x10210000
 8002f5c:	10120000 	.word	0x10120000
 8002f60:	10110000 	.word	0x10110000
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	40010800 	.word	0x40010800
 8002f70:	40010c00 	.word	0x40010c00
 8002f74:	40011000 	.word	0x40011000
 8002f78:	40011400 	.word	0x40011400
 8002f7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_GPIO_Init+0x304>)
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	4909      	ldr	r1, [pc, #36]	; (8002fb0 <HAL_GPIO_Init+0x304>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	3301      	adds	r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f47f ae8e 	bne.w	8002cc0 <HAL_GPIO_Init+0x14>
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	372c      	adds	r7, #44	; 0x2c
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fc4:	787b      	ldrb	r3, [r7, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fd0:	e003      	b.n	8002fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fd2:	887b      	ldrh	r3, [r7, #2]
 8002fd4:	041a      	lsls	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	611a      	str	r2, [r3, #16]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	43d9      	mvns	r1, r3
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	400b      	ands	r3, r1
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	611a      	str	r2, [r3, #16]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
	...

08003018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e12b      	b.n	8003282 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe f9dc 	bl	80013fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800306a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800307a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800307c:	f001 fb6e 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8003080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4a81      	ldr	r2, [pc, #516]	; (800328c <HAL_I2C_Init+0x274>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d807      	bhi.n	800309c <HAL_I2C_Init+0x84>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a80      	ldr	r2, [pc, #512]	; (8003290 <HAL_I2C_Init+0x278>)
 8003090:	4293      	cmp	r3, r2
 8003092:	bf94      	ite	ls
 8003094:	2301      	movls	r3, #1
 8003096:	2300      	movhi	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e006      	b.n	80030aa <HAL_I2C_Init+0x92>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a7d      	ldr	r2, [pc, #500]	; (8003294 <HAL_I2C_Init+0x27c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	bf94      	ite	ls
 80030a4:	2301      	movls	r3, #1
 80030a6:	2300      	movhi	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0e7      	b.n	8003282 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a78      	ldr	r2, [pc, #480]	; (8003298 <HAL_I2C_Init+0x280>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	0c9b      	lsrs	r3, r3, #18
 80030bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a6a      	ldr	r2, [pc, #424]	; (800328c <HAL_I2C_Init+0x274>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d802      	bhi.n	80030ec <HAL_I2C_Init+0xd4>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3301      	adds	r3, #1
 80030ea:	e009      	b.n	8003100 <HAL_I2C_Init+0xe8>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	4a69      	ldr	r2, [pc, #420]	; (800329c <HAL_I2C_Init+0x284>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	3301      	adds	r3, #1
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	430b      	orrs	r3, r1
 8003106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	495c      	ldr	r1, [pc, #368]	; (800328c <HAL_I2C_Init+0x274>)
 800311c:	428b      	cmp	r3, r1
 800311e:	d819      	bhi.n	8003154 <HAL_I2C_Init+0x13c>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e59      	subs	r1, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fbb1 f3f3 	udiv	r3, r1, r3
 800312e:	1c59      	adds	r1, r3, #1
 8003130:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003134:	400b      	ands	r3, r1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_I2C_Init+0x138>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e59      	subs	r1, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fbb1 f3f3 	udiv	r3, r1, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	e051      	b.n	80031f4 <HAL_I2C_Init+0x1dc>
 8003150:	2304      	movs	r3, #4
 8003152:	e04f      	b.n	80031f4 <HAL_I2C_Init+0x1dc>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <HAL_I2C_Init+0x168>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1e58      	subs	r0, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e012      	b.n	80031a6 <HAL_I2C_Init+0x18e>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e58      	subs	r0, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	0099      	lsls	r1, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	fbb0 f3f3 	udiv	r3, r0, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Init+0x196>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e022      	b.n	80031f4 <HAL_I2C_Init+0x1dc>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10e      	bne.n	80031d4 <HAL_I2C_Init+0x1bc>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1e58      	subs	r0, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	440b      	add	r3, r1
 80031c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c8:	3301      	adds	r3, #1
 80031ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d2:	e00f      	b.n	80031f4 <HAL_I2C_Init+0x1dc>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e58      	subs	r0, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	0099      	lsls	r1, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	6809      	ldr	r1, [r1, #0]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6911      	ldr	r1, [r2, #16]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68d2      	ldr	r2, [r2, #12]
 800322e:	4311      	orrs	r1, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	430b      	orrs	r3, r1
 8003236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	000186a0 	.word	0x000186a0
 8003290:	001e847f 	.word	0x001e847f
 8003294:	003d08ff 	.word	0x003d08ff
 8003298:	431bde83 	.word	0x431bde83
 800329c:	10624dd3 	.word	0x10624dd3

080032a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	461a      	mov	r2, r3
 80032ac:	460b      	mov	r3, r1
 80032ae:	817b      	strh	r3, [r7, #10]
 80032b0:	4613      	mov	r3, r2
 80032b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7fe fc4c 	bl	8001b50 <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	f040 80e0 	bne.w	8003488 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2319      	movs	r3, #25
 80032ce:	2201      	movs	r2, #1
 80032d0:	4970      	ldr	r1, [pc, #448]	; (8003494 <HAL_I2C_Master_Transmit+0x1f4>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fc92 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
 80032e0:	e0d3      	b.n	800348a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_I2C_Master_Transmit+0x50>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e0cc      	b.n	800348a <HAL_I2C_Master_Transmit+0x1ea>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d007      	beq.n	8003316 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003324:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2221      	movs	r2, #33	; 0x21
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2210      	movs	r2, #16
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	893a      	ldrh	r2, [r7, #8]
 8003346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a50      	ldr	r2, [pc, #320]	; (8003498 <HAL_I2C_Master_Transmit+0x1f8>)
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003358:	8979      	ldrh	r1, [r7, #10]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	6a3a      	ldr	r2, [r7, #32]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fafc 	bl	800395c <I2C_MasterRequestWrite>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e08d      	b.n	800348a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003384:	e066      	b.n	8003454 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	6a39      	ldr	r1, [r7, #32]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fd0c 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b04      	cmp	r3, #4
 800339c:	d107      	bne.n	80033ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06b      	b.n	800348a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	781a      	ldrb	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d11b      	bne.n	8003428 <HAL_I2C_Master_Transmit+0x188>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d017      	beq.n	8003428 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	6a39      	ldr	r1, [r7, #32]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fcfc 	bl	8003e2a <I2C_WaitOnBTFFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b04      	cmp	r3, #4
 800343e:	d107      	bne.n	8003450 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e01a      	b.n	800348a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	d194      	bne.n	8003386 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e000      	b.n	800348a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	00100002 	.word	0x00100002
 8003498:	ffff0000 	.word	0xffff0000

0800349c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	461a      	mov	r2, r3
 80034a8:	460b      	mov	r3, r1
 80034aa:	817b      	strh	r3, [r7, #10]
 80034ac:	4613      	mov	r3, r2
 80034ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7fe fb4c 	bl	8001b50 <HAL_GetTick>
 80034b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	f040 823f 	bne.w	8003946 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2319      	movs	r3, #25
 80034ce:	2201      	movs	r2, #1
 80034d0:	497f      	ldr	r1, [pc, #508]	; (80036d0 <HAL_I2C_Master_Receive+0x234>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fb92 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	e232      	b.n	8003948 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_I2C_Master_Receive+0x54>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e22b      	b.n	8003948 <HAL_I2C_Master_Receive+0x4ac>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d007      	beq.n	8003516 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003524:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2222      	movs	r2, #34	; 0x22
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2210      	movs	r2, #16
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	893a      	ldrh	r2, [r7, #8]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a5f      	ldr	r2, [pc, #380]	; (80036d4 <HAL_I2C_Master_Receive+0x238>)
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003558:	8979      	ldrh	r1, [r7, #10]
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fa7e 	bl	8003a60 <I2C_MasterRequestRead>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e1ec      	b.n	8003948 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d113      	bne.n	800359e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	e1c0      	b.n	8003920 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d11e      	bne.n	80035e4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035b6:	b672      	cpsid	i
}
 80035b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035e0:	b662      	cpsie	i
}
 80035e2:	e035      	b.n	8003650 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d11e      	bne.n	800362a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035fc:	b672      	cpsid	i
}
 80035fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003626:	b662      	cpsie	i
}
 8003628:	e012      	b.n	8003650 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003650:	e166      	b.n	8003920 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	2b03      	cmp	r3, #3
 8003658:	f200 811f 	bhi.w	800389a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	2b01      	cmp	r3, #1
 8003662:	d123      	bne.n	80036ac <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fc1f 	bl	8003eac <I2C_WaitOnRXNEFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e167      	b.n	8003948 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036aa:	e139      	b.n	8003920 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d152      	bne.n	800375a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	2200      	movs	r2, #0
 80036bc:	4906      	ldr	r1, [pc, #24]	; (80036d8 <HAL_I2C_Master_Receive+0x23c>)
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa9c 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e13c      	b.n	8003948 <HAL_I2C_Master_Receive+0x4ac>
 80036ce:	bf00      	nop
 80036d0:	00100002 	.word	0x00100002
 80036d4:	ffff0000 	.word	0xffff0000
 80036d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80036dc:	b672      	cpsid	i
}
 80036de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003722:	b662      	cpsie	i
}
 8003724:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003758:	e0e2      	b.n	8003920 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	2200      	movs	r2, #0
 8003762:	497b      	ldr	r1, [pc, #492]	; (8003950 <HAL_I2C_Master_Receive+0x4b4>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fa49 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0e9      	b.n	8003948 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003782:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003784:	b672      	cpsid	i
}
 8003786:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037ba:	4b66      	ldr	r3, [pc, #408]	; (8003954 <HAL_I2C_Master_Receive+0x4b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	08db      	lsrs	r3, r3, #3
 80037c0:	4a65      	ldr	r2, [pc, #404]	; (8003958 <HAL_I2C_Master_Receive+0x4bc>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0a1a      	lsrs	r2, r3, #8
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00da      	lsls	r2, r3, #3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d118      	bne.n	8003812 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003802:	b662      	cpsie	i
}
 8003804:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e09a      	b.n	8003948 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d1d9      	bne.n	80037d4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003862:	b662      	cpsie	i
}
 8003864:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003898:	e042      	b.n	8003920 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fb04 	bl	8003eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e04c      	b.n	8003948 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d118      	bne.n	8003920 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	f47f ae94 	bne.w	8003652 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3728      	adds	r7, #40	; 0x28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	00010004 	.word	0x00010004
 8003954:	20000000 	.word	0x20000000
 8003958:	14f8b589 	.word	0x14f8b589

0800395c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	460b      	mov	r3, r1
 800396a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d006      	beq.n	8003986 <I2C_MasterRequestWrite+0x2a>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d003      	beq.n	8003986 <I2C_MasterRequestWrite+0x2a>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003984:	d108      	bne.n	8003998 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	e00b      	b.n	80039b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	2b12      	cmp	r3, #18
 800399e:	d107      	bne.n	80039b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f91d 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00d      	beq.n	80039e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d6:	d103      	bne.n	80039e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e035      	b.n	8003a50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ec:	d108      	bne.n	8003a00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039fc:	611a      	str	r2, [r3, #16]
 80039fe:	e01b      	b.n	8003a38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	11db      	asrs	r3, r3, #7
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f003 0306 	and.w	r3, r3, #6
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f063 030f 	orn	r3, r3, #15
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	490e      	ldr	r1, [pc, #56]	; (8003a58 <I2C_MasterRequestWrite+0xfc>)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f943 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e010      	b.n	8003a50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4907      	ldr	r1, [pc, #28]	; (8003a5c <I2C_MasterRequestWrite+0x100>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f933 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	00010008 	.word	0x00010008
 8003a5c:	00010002 	.word	0x00010002

08003a60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d006      	beq.n	8003a9a <I2C_MasterRequestRead+0x3a>
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d003      	beq.n	8003a9a <I2C_MasterRequestRead+0x3a>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a98:	d108      	bne.n	8003aac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e00b      	b.n	8003ac4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	2b11      	cmp	r3, #17
 8003ab2:	d107      	bne.n	8003ac4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f893 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aea:	d103      	bne.n	8003af4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e079      	b.n	8003bec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b00:	d108      	bne.n	8003b14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b02:	897b      	ldrh	r3, [r7, #10]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	611a      	str	r2, [r3, #16]
 8003b12:	e05f      	b.n	8003bd4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b14:	897b      	ldrh	r3, [r7, #10]
 8003b16:	11db      	asrs	r3, r3, #7
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 0306 	and.w	r3, r3, #6
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f063 030f 	orn	r3, r3, #15
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4930      	ldr	r1, [pc, #192]	; (8003bf4 <I2C_MasterRequestRead+0x194>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f8b9 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e054      	b.n	8003bec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b42:	897b      	ldrh	r3, [r7, #10]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4929      	ldr	r1, [pc, #164]	; (8003bf8 <I2C_MasterRequestRead+0x198>)
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f8a9 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e044      	b.n	8003bec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f831 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00d      	beq.n	8003bbc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bae:	d103      	bne.n	8003bb8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e017      	b.n	8003bec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bbc:	897b      	ldrh	r3, [r7, #10]
 8003bbe:	11db      	asrs	r3, r3, #7
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f003 0306 	and.w	r3, r3, #6
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f063 030e 	orn	r3, r3, #14
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4907      	ldr	r1, [pc, #28]	; (8003bf8 <I2C_MasterRequestRead+0x198>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f865 	bl	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	00010008 	.word	0x00010008
 8003bf8:	00010002 	.word	0x00010002

08003bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c0c:	e025      	b.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d021      	beq.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c16:	f7fd ff9b 	bl	8001b50 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d302      	bcc.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d116      	bne.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f043 0220 	orr.w	r2, r3, #32
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e023      	b.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d10d      	bne.n	8003c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	e00c      	b.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	43da      	mvns	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d0b6      	beq.n	8003c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cb8:	e051      	b.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc8:	d123      	bne.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e046      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d021      	beq.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fd ff19 	bl	8001b50 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d116      	bne.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e020      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d10c      	bne.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4013      	ands	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e00b      	b.n	8003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d18d      	bne.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db4:	e02d      	b.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8ce 	bl	8003f58 <I2C_IsAcknowledgeFailed>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e02d      	b.n	8003e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d021      	beq.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fd febf 	bl	8001b50 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d116      	bne.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e007      	b.n	8003e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d1ca      	bne.n	8003db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e36:	e02d      	b.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f88d 	bl	8003f58 <I2C_IsAcknowledgeFailed>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e02d      	b.n	8003ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d021      	beq.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e50:	f7fd fe7e 	bl	8001b50 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d116      	bne.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e007      	b.n	8003ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d1ca      	bne.n	8003e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eb8:	e042      	b.n	8003f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d119      	bne.n	8003efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0210 	mvn.w	r2, #16
 8003ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e029      	b.n	8003f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efc:	f7fd fe28 	bl	8001b50 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d302      	bcc.n	8003f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d116      	bne.n	8003f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0220 	orr.w	r2, r3, #32
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d1b5      	bne.n	8003eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d11b      	bne.n	8003fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f043 0204 	orr.w	r2, r3, #4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e26c      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8087 	beq.w	80040e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fd4:	4b92      	ldr	r3, [pc, #584]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d00c      	beq.n	8003ffa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fe0:	4b8f      	ldr	r3, [pc, #572]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d112      	bne.n	8004012 <HAL_RCC_OscConfig+0x5e>
 8003fec:	4b8c      	ldr	r3, [pc, #560]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d10b      	bne.n	8004012 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffa:	4b89      	ldr	r3, [pc, #548]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d06c      	beq.n	80040e0 <HAL_RCC_OscConfig+0x12c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d168      	bne.n	80040e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e246      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x76>
 800401c:	4b80      	ldr	r3, [pc, #512]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a7f      	ldr	r2, [pc, #508]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	e02e      	b.n	8004088 <HAL_RCC_OscConfig+0xd4>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0x98>
 8004032:	4b7b      	ldr	r3, [pc, #492]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a7a      	ldr	r2, [pc, #488]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b78      	ldr	r3, [pc, #480]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a77      	ldr	r2, [pc, #476]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e01d      	b.n	8004088 <HAL_RCC_OscConfig+0xd4>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0xbc>
 8004056:	4b72      	ldr	r3, [pc, #456]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a71      	ldr	r2, [pc, #452]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 800405c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	4b6f      	ldr	r3, [pc, #444]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a6e      	ldr	r2, [pc, #440]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0xd4>
 8004070:	4b6b      	ldr	r3, [pc, #428]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a6a      	ldr	r2, [pc, #424]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	4b68      	ldr	r3, [pc, #416]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a67      	ldr	r2, [pc, #412]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004086:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d013      	beq.n	80040b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fd fd5e 	bl	8001b50 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fd fd5a 	bl	8001b50 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e1fa      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b5d      	ldr	r3, [pc, #372]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0xe4>
 80040b6:	e014      	b.n	80040e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fd fd4a 	bl	8001b50 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fd fd46 	bl	8001b50 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e1e6      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x10c>
 80040de:	e000      	b.n	80040e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d063      	beq.n	80041b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ee:	4b4c      	ldr	r3, [pc, #304]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040fa:	4b49      	ldr	r3, [pc, #292]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b08      	cmp	r3, #8
 8004104:	d11c      	bne.n	8004140 <HAL_RCC_OscConfig+0x18c>
 8004106:	4b46      	ldr	r3, [pc, #280]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d116      	bne.n	8004140 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004112:	4b43      	ldr	r3, [pc, #268]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_RCC_OscConfig+0x176>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e1ba      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412a:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4939      	ldr	r1, [pc, #228]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413e:	e03a      	b.n	80041b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004148:	4b36      	ldr	r3, [pc, #216]	; (8004224 <HAL_RCC_OscConfig+0x270>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fd fcff 	bl	8001b50 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004156:	f7fd fcfb 	bl	8001b50 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e19b      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004168:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004174:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4927      	ldr	r1, [pc, #156]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 8004184:	4313      	orrs	r3, r2
 8004186:	600b      	str	r3, [r1, #0]
 8004188:	e015      	b.n	80041b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418a:	4b26      	ldr	r3, [pc, #152]	; (8004224 <HAL_RCC_OscConfig+0x270>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fd fcde 	bl	8001b50 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004198:	f7fd fcda 	bl	8001b50 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e17a      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041aa:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d03a      	beq.n	8004238 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d019      	beq.n	80041fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d0:	f7fd fcbe 	bl	8001b50 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fd fcba 	bl	8001b50 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e15a      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ea:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041f6:	2001      	movs	r0, #1
 80041f8:	f000 fad8 	bl	80047ac <RCC_Delay>
 80041fc:	e01c      	b.n	8004238 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <HAL_RCC_OscConfig+0x274>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004204:	f7fd fca4 	bl	8001b50 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420a:	e00f      	b.n	800422c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420c:	f7fd fca0 	bl	8001b50 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d908      	bls.n	800422c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e140      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
 8004224:	42420000 	.word	0x42420000
 8004228:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422c:	4b9e      	ldr	r3, [pc, #632]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e9      	bne.n	800420c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80a6 	beq.w	8004392 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424a:	4b97      	ldr	r3, [pc, #604]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b94      	ldr	r3, [pc, #592]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	4a93      	ldr	r2, [pc, #588]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	61d3      	str	r3, [r2, #28]
 8004262:	4b91      	ldr	r3, [pc, #580]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004272:	4b8e      	ldr	r3, [pc, #568]	; (80044ac <HAL_RCC_OscConfig+0x4f8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d118      	bne.n	80042b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427e:	4b8b      	ldr	r3, [pc, #556]	; (80044ac <HAL_RCC_OscConfig+0x4f8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a8a      	ldr	r2, [pc, #552]	; (80044ac <HAL_RCC_OscConfig+0x4f8>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428a:	f7fd fc61 	bl	8001b50 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004292:	f7fd fc5d 	bl	8001b50 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b64      	cmp	r3, #100	; 0x64
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e0fd      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	4b81      	ldr	r3, [pc, #516]	; (80044ac <HAL_RCC_OscConfig+0x4f8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x312>
 80042b8:	4b7b      	ldr	r3, [pc, #492]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4a7a      	ldr	r2, [pc, #488]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6213      	str	r3, [r2, #32]
 80042c4:	e02d      	b.n	8004322 <HAL_RCC_OscConfig+0x36e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x334>
 80042ce:	4b76      	ldr	r3, [pc, #472]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	4a75      	ldr	r2, [pc, #468]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	6213      	str	r3, [r2, #32]
 80042da:	4b73      	ldr	r3, [pc, #460]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	4a72      	ldr	r2, [pc, #456]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80042e0:	f023 0304 	bic.w	r3, r3, #4
 80042e4:	6213      	str	r3, [r2, #32]
 80042e6:	e01c      	b.n	8004322 <HAL_RCC_OscConfig+0x36e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d10c      	bne.n	800430a <HAL_RCC_OscConfig+0x356>
 80042f0:	4b6d      	ldr	r3, [pc, #436]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	4a6c      	ldr	r2, [pc, #432]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80042f6:	f043 0304 	orr.w	r3, r3, #4
 80042fa:	6213      	str	r3, [r2, #32]
 80042fc:	4b6a      	ldr	r3, [pc, #424]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	4a69      	ldr	r2, [pc, #420]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6213      	str	r3, [r2, #32]
 8004308:	e00b      	b.n	8004322 <HAL_RCC_OscConfig+0x36e>
 800430a:	4b67      	ldr	r3, [pc, #412]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	4a66      	ldr	r2, [pc, #408]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	6213      	str	r3, [r2, #32]
 8004316:	4b64      	ldr	r3, [pc, #400]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	4a63      	ldr	r2, [pc, #396]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800431c:	f023 0304 	bic.w	r3, r3, #4
 8004320:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d015      	beq.n	8004356 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432a:	f7fd fc11 	bl	8001b50 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fd fc0d 	bl	8001b50 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0ab      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004348:	4b57      	ldr	r3, [pc, #348]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ee      	beq.n	8004332 <HAL_RCC_OscConfig+0x37e>
 8004354:	e014      	b.n	8004380 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004356:	f7fd fbfb 	bl	8001b50 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435c:	e00a      	b.n	8004374 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435e:	f7fd fbf7 	bl	8001b50 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f241 3288 	movw	r2, #5000	; 0x1388
 800436c:	4293      	cmp	r3, r2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e095      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004374:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ee      	bne.n	800435e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d105      	bne.n	8004392 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004386:	4b48      	ldr	r3, [pc, #288]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4a47      	ldr	r2, [pc, #284]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800438c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004390:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8081 	beq.w	800449e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800439c:	4b42      	ldr	r3, [pc, #264]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d061      	beq.n	800446c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d146      	bne.n	800443e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b0:	4b3f      	ldr	r3, [pc, #252]	; (80044b0 <HAL_RCC_OscConfig+0x4fc>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fd fbcb 	bl	8001b50 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043be:	f7fd fbc7 	bl	8001b50 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e067      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d0:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d108      	bne.n	80043f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043e6:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	492d      	ldr	r1, [pc, #180]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a19      	ldr	r1, [r3, #32]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	430b      	orrs	r3, r1
 800440a:	4927      	ldr	r1, [pc, #156]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004410:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <HAL_RCC_OscConfig+0x4fc>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004416:	f7fd fb9b 	bl	8001b50 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441e:	f7fd fb97 	bl	8001b50 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e037      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x46a>
 800443c:	e02f      	b.n	800449e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443e:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <HAL_RCC_OscConfig+0x4fc>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fd fb84 	bl	8001b50 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fd fb80 	bl	8001b50 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e020      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x498>
 800446a:	e018      	b.n	800449e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e013      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_OscConfig+0x4f4>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	429a      	cmp	r2, r3
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40007000 	.word	0x40007000
 80044b0:	42420060 	.word	0x42420060

080044b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0d0      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c8:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d910      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b67      	ldr	r3, [pc, #412]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 0207 	bic.w	r2, r3, #7
 80044de:	4965      	ldr	r1, [pc, #404]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b63      	ldr	r3, [pc, #396]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0b8      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004510:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800451a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004532:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b50      	ldr	r3, [pc, #320]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	494d      	ldr	r1, [pc, #308]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d040      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d115      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07f      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e073      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e06b      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004592:	4b39      	ldr	r3, [pc, #228]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f023 0203 	bic.w	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4936      	ldr	r1, [pc, #216]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a4:	f7fd fad4 	bl	8001b50 <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ac:	f7fd fad0 	bl	8001b50 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e053      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	4b2d      	ldr	r3, [pc, #180]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 020c 	and.w	r2, r3, #12
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d1eb      	bne.n	80045ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d210      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 0207 	bic.w	r2, r3, #7
 80045ea:	4922      	ldr	r1, [pc, #136]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b20      	ldr	r3, [pc, #128]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e032      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4916      	ldr	r1, [pc, #88]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	490e      	ldr	r1, [pc, #56]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004642:	f000 f821 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 8004646:	4602      	mov	r2, r0
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	490a      	ldr	r1, [pc, #40]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	5ccb      	ldrb	r3, [r1, r3]
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	4a09      	ldr	r2, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x1cc>)
 800465c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x1d0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd fa32 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40022000 	.word	0x40022000
 8004678:	40021000 	.word	0x40021000
 800467c:	080055cc 	.word	0x080055cc
 8004680:	20000000 	.word	0x20000000
 8004684:	20000004 	.word	0x20000004

08004688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004688:	b490      	push	{r4, r7}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800468e:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004690:	1d3c      	adds	r4, r7, #4
 8004692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004698:	f240 2301 	movw	r3, #513	; 0x201
 800469c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_RCC_GetSysClockFreq+0xb4>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d002      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x40>
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x46>
 80046c6:	e02d      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046c8:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ca:	623b      	str	r3, [r7, #32]
      break;
 80046cc:	e02d      	b.n	800472a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	0c9b      	lsrs	r3, r3, #18
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046da:	4413      	add	r3, r2
 80046dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046ec:	4b13      	ldr	r3, [pc, #76]	; (800473c <HAL_RCC_GetSysClockFreq+0xb4>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0c5b      	lsrs	r3, r3, #17
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046fa:	4413      	add	r3, r2
 80046fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004700:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004706:	fb02 f203 	mul.w	r2, r2, r3
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	e004      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	4a0b      	ldr	r2, [pc, #44]	; (8004744 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004718:	fb02 f303 	mul.w	r3, r2, r3
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	623b      	str	r3, [r7, #32]
      break;
 8004722:	e002      	b.n	800472a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004726:	623b      	str	r3, [r7, #32]
      break;
 8004728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472a:	6a3b      	ldr	r3, [r7, #32]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3728      	adds	r7, #40	; 0x28
 8004730:	46bd      	mov	sp, r7
 8004732:	bc90      	pop	{r4, r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	080055bc 	.word	0x080055bc
 800473c:	40021000 	.word	0x40021000
 8004740:	007a1200 	.word	0x007a1200
 8004744:	003d0900 	.word	0x003d0900

08004748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800474c:	4b02      	ldr	r3, [pc, #8]	; (8004758 <HAL_RCC_GetHCLKFreq+0x10>)
 800474e:	681b      	ldr	r3, [r3, #0]
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr
 8004758:	20000000 	.word	0x20000000

0800475c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004760:	f7ff fff2 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 8004764:	4602      	mov	r2, r0
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4903      	ldr	r1, [pc, #12]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004772:	5ccb      	ldrb	r3, [r1, r3]
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40021000 	.word	0x40021000
 8004780:	080055dc 	.word	0x080055dc

08004784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004788:	f7ff ffde 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	0adb      	lsrs	r3, r3, #11
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4903      	ldr	r1, [pc, #12]	; (80047a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40021000 	.word	0x40021000
 80047a8:	080055dc 	.word	0x080055dc

080047ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <RCC_Delay+0x34>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a0a      	ldr	r2, [pc, #40]	; (80047e4 <RCC_Delay+0x38>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	0a5b      	lsrs	r3, r3, #9
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047c8:	bf00      	nop
  }
  while (Delay --);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1e5a      	subs	r2, r3, #1
 80047ce:	60fa      	str	r2, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f9      	bne.n	80047c8 <RCC_Delay+0x1c>
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	20000000 	.word	0x20000000
 80047e4:	10624dd3 	.word	0x10624dd3

080047e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d07d      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004804:	2300      	movs	r3, #0
 8004806:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004808:	4b4f      	ldr	r3, [pc, #316]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10d      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004814:	4b4c      	ldr	r3, [pc, #304]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	4a4b      	ldr	r2, [pc, #300]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481e:	61d3      	str	r3, [r2, #28]
 8004820:	4b49      	ldr	r3, [pc, #292]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482c:	2301      	movs	r3, #1
 800482e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004830:	4b46      	ldr	r3, [pc, #280]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d118      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483c:	4b43      	ldr	r3, [pc, #268]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a42      	ldr	r2, [pc, #264]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004848:	f7fd f982 	bl	8001b50 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484e:	e008      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004850:	f7fd f97e 	bl	8001b50 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e06d      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004862:	4b3a      	ldr	r3, [pc, #232]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800486e:	4b36      	ldr	r3, [pc, #216]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004876:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02e      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	429a      	cmp	r2, r3
 800488a:	d027      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800488c:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004894:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004896:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800489c:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048a2:	4a29      	ldr	r2, [pc, #164]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d014      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fd f94d 	bl	8001b50 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b8:	e00a      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fd f949 	bl	8001b50 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e036      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d0:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ee      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4917      	ldr	r1, [pc, #92]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d105      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	4a13      	ldr	r2, [pc, #76]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	490b      	ldr	r1, [pc, #44]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800492a:	4b07      	ldr	r3, [pc, #28]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	4904      	ldr	r1, [pc, #16]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000
 800494c:	40007000 	.word	0x40007000
 8004950:	42420440 	.word	0x42420440

08004954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e03f      	b.n	80049e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fd f81e 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2224      	movs	r2, #36	; 0x24
 8004984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f905 	bl	8004ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08a      	sub	sp, #40	; 0x28
 80049f2:	af02      	add	r7, sp, #8
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	603b      	str	r3, [r7, #0]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d17c      	bne.n	8004b08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_UART_Transmit+0x2c>
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e075      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_UART_Transmit+0x3e>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e06e      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2221      	movs	r2, #33	; 0x21
 8004a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a42:	f7fd f885 	bl	8001b50 <HAL_GetTick>
 8004a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5c:	d108      	bne.n	8004a70 <HAL_UART_Transmit+0x82>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e003      	b.n	8004a78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004a80:	e02a      	b.n	8004ad8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2180      	movs	r1, #128	; 0x80
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f840 	bl	8004b12 <UART_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e036      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e007      	b.n	8004aca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1cf      	bne.n	8004a82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2140      	movs	r1, #64	; 0x40
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f810 	bl	8004b12 <UART_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e006      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b22:	e02c      	b.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d028      	beq.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b32:	f7fd f80d 	bl	8001b50 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d21d      	bcs.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b50:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e00f      	b.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4013      	ands	r3, r2
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	bf0c      	ite	eq
 8004b8e:	2301      	moveq	r3, #1
 8004b90:	2300      	movne	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d0c3      	beq.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004be2:	f023 030c 	bic.w	r3, r3, #12
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	430b      	orrs	r3, r1
 8004bee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2c      	ldr	r2, [pc, #176]	; (8004cbc <UART_SetConfig+0x114>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d103      	bne.n	8004c18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7ff fdb8 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	e002      	b.n	8004c1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c18:	f7ff fda0 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8004c1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009a      	lsls	r2, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <UART_SetConfig+0x118>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	0119      	lsls	r1, r3, #4
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009a      	lsls	r2, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c54:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <UART_SetConfig+0x118>)
 8004c56:	fba3 0302 	umull	r0, r3, r3, r2
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	2064      	movs	r0, #100	; 0x64
 8004c5e:	fb00 f303 	mul.w	r3, r0, r3
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	3332      	adds	r3, #50	; 0x32
 8004c68:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <UART_SetConfig+0x118>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c74:	4419      	add	r1, r3
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009a      	lsls	r2, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <UART_SetConfig+0x118>)
 8004c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2064      	movs	r0, #100	; 0x64
 8004c96:	fb00 f303 	mul.w	r3, r0, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	3332      	adds	r3, #50	; 0x32
 8004ca0:	4a07      	ldr	r2, [pc, #28]	; (8004cc0 <UART_SetConfig+0x118>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	f003 020f 	and.w	r2, r3, #15
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40013800 	.word	0x40013800
 8004cc0:	51eb851f 	.word	0x51eb851f

08004cc4 <__errno>:
 8004cc4:	4b01      	ldr	r3, [pc, #4]	; (8004ccc <__errno+0x8>)
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	2000000c 	.word	0x2000000c

08004cd0 <__libc_init_array>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	4d0c      	ldr	r5, [pc, #48]	; (8004d08 <__libc_init_array+0x38>)
 8004cd6:	4c0d      	ldr	r4, [pc, #52]	; (8004d0c <__libc_init_array+0x3c>)
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	42a6      	cmp	r6, r4
 8004cde:	d109      	bne.n	8004cf4 <__libc_init_array+0x24>
 8004ce0:	f000 fc5c 	bl	800559c <_init>
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	4d0a      	ldr	r5, [pc, #40]	; (8004d10 <__libc_init_array+0x40>)
 8004ce8:	4c0a      	ldr	r4, [pc, #40]	; (8004d14 <__libc_init_array+0x44>)
 8004cea:	1b64      	subs	r4, r4, r5
 8004cec:	10a4      	asrs	r4, r4, #2
 8004cee:	42a6      	cmp	r6, r4
 8004cf0:	d105      	bne.n	8004cfe <__libc_init_array+0x2e>
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf8:	4798      	blx	r3
 8004cfa:	3601      	adds	r6, #1
 8004cfc:	e7ee      	b.n	8004cdc <__libc_init_array+0xc>
 8004cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d02:	4798      	blx	r3
 8004d04:	3601      	adds	r6, #1
 8004d06:	e7f2      	b.n	8004cee <__libc_init_array+0x1e>
 8004d08:	08005618 	.word	0x08005618
 8004d0c:	08005618 	.word	0x08005618
 8004d10:	08005618 	.word	0x08005618
 8004d14:	0800561c 	.word	0x0800561c

08004d18 <memset>:
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4402      	add	r2, r0
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d100      	bne.n	8004d22 <memset+0xa>
 8004d20:	4770      	bx	lr
 8004d22:	f803 1b01 	strb.w	r1, [r3], #1
 8004d26:	e7f9      	b.n	8004d1c <memset+0x4>

08004d28 <siprintf>:
 8004d28:	b40e      	push	{r1, r2, r3}
 8004d2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d2e:	b500      	push	{lr}
 8004d30:	b09c      	sub	sp, #112	; 0x70
 8004d32:	ab1d      	add	r3, sp, #116	; 0x74
 8004d34:	9002      	str	r0, [sp, #8]
 8004d36:	9006      	str	r0, [sp, #24]
 8004d38:	9107      	str	r1, [sp, #28]
 8004d3a:	9104      	str	r1, [sp, #16]
 8004d3c:	4808      	ldr	r0, [pc, #32]	; (8004d60 <siprintf+0x38>)
 8004d3e:	4909      	ldr	r1, [pc, #36]	; (8004d64 <siprintf+0x3c>)
 8004d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d44:	9105      	str	r1, [sp, #20]
 8004d46:	6800      	ldr	r0, [r0, #0]
 8004d48:	a902      	add	r1, sp, #8
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	f000 f868 	bl	8004e20 <_svfiprintf_r>
 8004d50:	2200      	movs	r2, #0
 8004d52:	9b02      	ldr	r3, [sp, #8]
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	b01c      	add	sp, #112	; 0x70
 8004d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d5c:	b003      	add	sp, #12
 8004d5e:	4770      	bx	lr
 8004d60:	2000000c 	.word	0x2000000c
 8004d64:	ffff0208 	.word	0xffff0208

08004d68 <__ssputs_r>:
 8004d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	688e      	ldr	r6, [r1, #8]
 8004d6e:	4682      	mov	sl, r0
 8004d70:	429e      	cmp	r6, r3
 8004d72:	460c      	mov	r4, r1
 8004d74:	4690      	mov	r8, r2
 8004d76:	461f      	mov	r7, r3
 8004d78:	d838      	bhi.n	8004dec <__ssputs_r+0x84>
 8004d7a:	898a      	ldrh	r2, [r1, #12]
 8004d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d80:	d032      	beq.n	8004de8 <__ssputs_r+0x80>
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	6909      	ldr	r1, [r1, #16]
 8004d86:	3301      	adds	r3, #1
 8004d88:	eba5 0901 	sub.w	r9, r5, r1
 8004d8c:	6965      	ldr	r5, [r4, #20]
 8004d8e:	444b      	add	r3, r9
 8004d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d98:	106d      	asrs	r5, r5, #1
 8004d9a:	429d      	cmp	r5, r3
 8004d9c:	bf38      	it	cc
 8004d9e:	461d      	movcc	r5, r3
 8004da0:	0553      	lsls	r3, r2, #21
 8004da2:	d531      	bpl.n	8004e08 <__ssputs_r+0xa0>
 8004da4:	4629      	mov	r1, r5
 8004da6:	f000 fb53 	bl	8005450 <_malloc_r>
 8004daa:	4606      	mov	r6, r0
 8004dac:	b950      	cbnz	r0, 8004dc4 <__ssputs_r+0x5c>
 8004dae:	230c      	movs	r3, #12
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	f8ca 3000 	str.w	r3, [sl]
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc4:	464a      	mov	r2, r9
 8004dc6:	6921      	ldr	r1, [r4, #16]
 8004dc8:	f000 face 	bl	8005368 <memcpy>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	6126      	str	r6, [r4, #16]
 8004dda:	444e      	add	r6, r9
 8004ddc:	6026      	str	r6, [r4, #0]
 8004dde:	463e      	mov	r6, r7
 8004de0:	6165      	str	r5, [r4, #20]
 8004de2:	eba5 0509 	sub.w	r5, r5, r9
 8004de6:	60a5      	str	r5, [r4, #8]
 8004de8:	42be      	cmp	r6, r7
 8004dea:	d900      	bls.n	8004dee <__ssputs_r+0x86>
 8004dec:	463e      	mov	r6, r7
 8004dee:	4632      	mov	r2, r6
 8004df0:	4641      	mov	r1, r8
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	f000 fac6 	bl	8005384 <memmove>
 8004df8:	68a3      	ldr	r3, [r4, #8]
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	1b9b      	subs	r3, r3, r6
 8004dfe:	4432      	add	r2, r6
 8004e00:	2000      	movs	r0, #0
 8004e02:	60a3      	str	r3, [r4, #8]
 8004e04:	6022      	str	r2, [r4, #0]
 8004e06:	e7db      	b.n	8004dc0 <__ssputs_r+0x58>
 8004e08:	462a      	mov	r2, r5
 8004e0a:	f000 fb7b 	bl	8005504 <_realloc_r>
 8004e0e:	4606      	mov	r6, r0
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d1e1      	bne.n	8004dd8 <__ssputs_r+0x70>
 8004e14:	4650      	mov	r0, sl
 8004e16:	6921      	ldr	r1, [r4, #16]
 8004e18:	f000 face 	bl	80053b8 <_free_r>
 8004e1c:	e7c7      	b.n	8004dae <__ssputs_r+0x46>
	...

08004e20 <_svfiprintf_r>:
 8004e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	4698      	mov	r8, r3
 8004e26:	898b      	ldrh	r3, [r1, #12]
 8004e28:	4607      	mov	r7, r0
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	460d      	mov	r5, r1
 8004e2e:	4614      	mov	r4, r2
 8004e30:	b09d      	sub	sp, #116	; 0x74
 8004e32:	d50e      	bpl.n	8004e52 <_svfiprintf_r+0x32>
 8004e34:	690b      	ldr	r3, [r1, #16]
 8004e36:	b963      	cbnz	r3, 8004e52 <_svfiprintf_r+0x32>
 8004e38:	2140      	movs	r1, #64	; 0x40
 8004e3a:	f000 fb09 	bl	8005450 <_malloc_r>
 8004e3e:	6028      	str	r0, [r5, #0]
 8004e40:	6128      	str	r0, [r5, #16]
 8004e42:	b920      	cbnz	r0, 8004e4e <_svfiprintf_r+0x2e>
 8004e44:	230c      	movs	r3, #12
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4c:	e0d1      	b.n	8004ff2 <_svfiprintf_r+0x1d2>
 8004e4e:	2340      	movs	r3, #64	; 0x40
 8004e50:	616b      	str	r3, [r5, #20]
 8004e52:	2300      	movs	r3, #0
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
 8004e56:	2320      	movs	r3, #32
 8004e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e5c:	2330      	movs	r3, #48	; 0x30
 8004e5e:	f04f 0901 	mov.w	r9, #1
 8004e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800500c <_svfiprintf_r+0x1ec>
 8004e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e6e:	4623      	mov	r3, r4
 8004e70:	469a      	mov	sl, r3
 8004e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e76:	b10a      	cbz	r2, 8004e7c <_svfiprintf_r+0x5c>
 8004e78:	2a25      	cmp	r2, #37	; 0x25
 8004e7a:	d1f9      	bne.n	8004e70 <_svfiprintf_r+0x50>
 8004e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004e80:	d00b      	beq.n	8004e9a <_svfiprintf_r+0x7a>
 8004e82:	465b      	mov	r3, fp
 8004e84:	4622      	mov	r2, r4
 8004e86:	4629      	mov	r1, r5
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f7ff ff6d 	bl	8004d68 <__ssputs_r>
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f000 80aa 	beq.w	8004fe8 <_svfiprintf_r+0x1c8>
 8004e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e96:	445a      	add	r2, fp
 8004e98:	9209      	str	r2, [sp, #36]	; 0x24
 8004e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 80a2 	beq.w	8004fe8 <_svfiprintf_r+0x1c8>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eae:	f10a 0a01 	add.w	sl, sl, #1
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	9307      	str	r3, [sp, #28]
 8004eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eba:	931a      	str	r3, [sp, #104]	; 0x68
 8004ebc:	4654      	mov	r4, sl
 8004ebe:	2205      	movs	r2, #5
 8004ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec4:	4851      	ldr	r0, [pc, #324]	; (800500c <_svfiprintf_r+0x1ec>)
 8004ec6:	f000 fa41 	bl	800534c <memchr>
 8004eca:	9a04      	ldr	r2, [sp, #16]
 8004ecc:	b9d8      	cbnz	r0, 8004f06 <_svfiprintf_r+0xe6>
 8004ece:	06d0      	lsls	r0, r2, #27
 8004ed0:	bf44      	itt	mi
 8004ed2:	2320      	movmi	r3, #32
 8004ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ed8:	0711      	lsls	r1, r2, #28
 8004eda:	bf44      	itt	mi
 8004edc:	232b      	movmi	r3, #43	; 0x2b
 8004ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee8:	d015      	beq.n	8004f16 <_svfiprintf_r+0xf6>
 8004eea:	4654      	mov	r4, sl
 8004eec:	2000      	movs	r0, #0
 8004eee:	f04f 0c0a 	mov.w	ip, #10
 8004ef2:	9a07      	ldr	r2, [sp, #28]
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004efa:	3b30      	subs	r3, #48	; 0x30
 8004efc:	2b09      	cmp	r3, #9
 8004efe:	d94e      	bls.n	8004f9e <_svfiprintf_r+0x17e>
 8004f00:	b1b0      	cbz	r0, 8004f30 <_svfiprintf_r+0x110>
 8004f02:	9207      	str	r2, [sp, #28]
 8004f04:	e014      	b.n	8004f30 <_svfiprintf_r+0x110>
 8004f06:	eba0 0308 	sub.w	r3, r0, r8
 8004f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	46a2      	mov	sl, r4
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	e7d2      	b.n	8004ebc <_svfiprintf_r+0x9c>
 8004f16:	9b03      	ldr	r3, [sp, #12]
 8004f18:	1d19      	adds	r1, r3, #4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	9103      	str	r1, [sp, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bfbb      	ittet	lt
 8004f22:	425b      	neglt	r3, r3
 8004f24:	f042 0202 	orrlt.w	r2, r2, #2
 8004f28:	9307      	strge	r3, [sp, #28]
 8004f2a:	9307      	strlt	r3, [sp, #28]
 8004f2c:	bfb8      	it	lt
 8004f2e:	9204      	strlt	r2, [sp, #16]
 8004f30:	7823      	ldrb	r3, [r4, #0]
 8004f32:	2b2e      	cmp	r3, #46	; 0x2e
 8004f34:	d10c      	bne.n	8004f50 <_svfiprintf_r+0x130>
 8004f36:	7863      	ldrb	r3, [r4, #1]
 8004f38:	2b2a      	cmp	r3, #42	; 0x2a
 8004f3a:	d135      	bne.n	8004fa8 <_svfiprintf_r+0x188>
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	3402      	adds	r4, #2
 8004f40:	1d1a      	adds	r2, r3, #4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	9203      	str	r2, [sp, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bfb8      	it	lt
 8004f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f4e:	9305      	str	r3, [sp, #20]
 8004f50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800501c <_svfiprintf_r+0x1fc>
 8004f54:	2203      	movs	r2, #3
 8004f56:	4650      	mov	r0, sl
 8004f58:	7821      	ldrb	r1, [r4, #0]
 8004f5a:	f000 f9f7 	bl	800534c <memchr>
 8004f5e:	b140      	cbz	r0, 8004f72 <_svfiprintf_r+0x152>
 8004f60:	2340      	movs	r3, #64	; 0x40
 8004f62:	eba0 000a 	sub.w	r0, r0, sl
 8004f66:	fa03 f000 	lsl.w	r0, r3, r0
 8004f6a:	9b04      	ldr	r3, [sp, #16]
 8004f6c:	3401      	adds	r4, #1
 8004f6e:	4303      	orrs	r3, r0
 8004f70:	9304      	str	r3, [sp, #16]
 8004f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f76:	2206      	movs	r2, #6
 8004f78:	4825      	ldr	r0, [pc, #148]	; (8005010 <_svfiprintf_r+0x1f0>)
 8004f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f7e:	f000 f9e5 	bl	800534c <memchr>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d038      	beq.n	8004ff8 <_svfiprintf_r+0x1d8>
 8004f86:	4b23      	ldr	r3, [pc, #140]	; (8005014 <_svfiprintf_r+0x1f4>)
 8004f88:	bb1b      	cbnz	r3, 8004fd2 <_svfiprintf_r+0x1b2>
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	3307      	adds	r3, #7
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	3308      	adds	r3, #8
 8004f94:	9303      	str	r3, [sp, #12]
 8004f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f98:	4433      	add	r3, r6
 8004f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f9c:	e767      	b.n	8004e6e <_svfiprintf_r+0x4e>
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fa6:	e7a5      	b.n	8004ef4 <_svfiprintf_r+0xd4>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f04f 0c0a 	mov.w	ip, #10
 8004fae:	4619      	mov	r1, r3
 8004fb0:	3401      	adds	r4, #1
 8004fb2:	9305      	str	r3, [sp, #20]
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fba:	3a30      	subs	r2, #48	; 0x30
 8004fbc:	2a09      	cmp	r2, #9
 8004fbe:	d903      	bls.n	8004fc8 <_svfiprintf_r+0x1a8>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0c5      	beq.n	8004f50 <_svfiprintf_r+0x130>
 8004fc4:	9105      	str	r1, [sp, #20]
 8004fc6:	e7c3      	b.n	8004f50 <_svfiprintf_r+0x130>
 8004fc8:	4604      	mov	r4, r0
 8004fca:	2301      	movs	r3, #1
 8004fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fd0:	e7f0      	b.n	8004fb4 <_svfiprintf_r+0x194>
 8004fd2:	ab03      	add	r3, sp, #12
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	462a      	mov	r2, r5
 8004fd8:	4638      	mov	r0, r7
 8004fda:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <_svfiprintf_r+0x1f8>)
 8004fdc:	a904      	add	r1, sp, #16
 8004fde:	f3af 8000 	nop.w
 8004fe2:	1c42      	adds	r2, r0, #1
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	d1d6      	bne.n	8004f96 <_svfiprintf_r+0x176>
 8004fe8:	89ab      	ldrh	r3, [r5, #12]
 8004fea:	065b      	lsls	r3, r3, #25
 8004fec:	f53f af2c 	bmi.w	8004e48 <_svfiprintf_r+0x28>
 8004ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ff2:	b01d      	add	sp, #116	; 0x74
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff8:	ab03      	add	r3, sp, #12
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	462a      	mov	r2, r5
 8004ffe:	4638      	mov	r0, r7
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <_svfiprintf_r+0x1f8>)
 8005002:	a904      	add	r1, sp, #16
 8005004:	f000 f87c 	bl	8005100 <_printf_i>
 8005008:	e7eb      	b.n	8004fe2 <_svfiprintf_r+0x1c2>
 800500a:	bf00      	nop
 800500c:	080055e4 	.word	0x080055e4
 8005010:	080055ee 	.word	0x080055ee
 8005014:	00000000 	.word	0x00000000
 8005018:	08004d69 	.word	0x08004d69
 800501c:	080055ea 	.word	0x080055ea

08005020 <_printf_common>:
 8005020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	4616      	mov	r6, r2
 8005026:	4699      	mov	r9, r3
 8005028:	688a      	ldr	r2, [r1, #8]
 800502a:	690b      	ldr	r3, [r1, #16]
 800502c:	4607      	mov	r7, r0
 800502e:	4293      	cmp	r3, r2
 8005030:	bfb8      	it	lt
 8005032:	4613      	movlt	r3, r2
 8005034:	6033      	str	r3, [r6, #0]
 8005036:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800503a:	460c      	mov	r4, r1
 800503c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005040:	b10a      	cbz	r2, 8005046 <_printf_common+0x26>
 8005042:	3301      	adds	r3, #1
 8005044:	6033      	str	r3, [r6, #0]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	0699      	lsls	r1, r3, #26
 800504a:	bf42      	ittt	mi
 800504c:	6833      	ldrmi	r3, [r6, #0]
 800504e:	3302      	addmi	r3, #2
 8005050:	6033      	strmi	r3, [r6, #0]
 8005052:	6825      	ldr	r5, [r4, #0]
 8005054:	f015 0506 	ands.w	r5, r5, #6
 8005058:	d106      	bne.n	8005068 <_printf_common+0x48>
 800505a:	f104 0a19 	add.w	sl, r4, #25
 800505e:	68e3      	ldr	r3, [r4, #12]
 8005060:	6832      	ldr	r2, [r6, #0]
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	42ab      	cmp	r3, r5
 8005066:	dc28      	bgt.n	80050ba <_printf_common+0x9a>
 8005068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800506c:	1e13      	subs	r3, r2, #0
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	bf18      	it	ne
 8005072:	2301      	movne	r3, #1
 8005074:	0692      	lsls	r2, r2, #26
 8005076:	d42d      	bmi.n	80050d4 <_printf_common+0xb4>
 8005078:	4649      	mov	r1, r9
 800507a:	4638      	mov	r0, r7
 800507c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005080:	47c0      	blx	r8
 8005082:	3001      	adds	r0, #1
 8005084:	d020      	beq.n	80050c8 <_printf_common+0xa8>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	68e5      	ldr	r5, [r4, #12]
 800508a:	f003 0306 	and.w	r3, r3, #6
 800508e:	2b04      	cmp	r3, #4
 8005090:	bf18      	it	ne
 8005092:	2500      	movne	r5, #0
 8005094:	6832      	ldr	r2, [r6, #0]
 8005096:	f04f 0600 	mov.w	r6, #0
 800509a:	68a3      	ldr	r3, [r4, #8]
 800509c:	bf08      	it	eq
 800509e:	1aad      	subeq	r5, r5, r2
 80050a0:	6922      	ldr	r2, [r4, #16]
 80050a2:	bf08      	it	eq
 80050a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bfc4      	itt	gt
 80050ac:	1a9b      	subgt	r3, r3, r2
 80050ae:	18ed      	addgt	r5, r5, r3
 80050b0:	341a      	adds	r4, #26
 80050b2:	42b5      	cmp	r5, r6
 80050b4:	d11a      	bne.n	80050ec <_printf_common+0xcc>
 80050b6:	2000      	movs	r0, #0
 80050b8:	e008      	b.n	80050cc <_printf_common+0xac>
 80050ba:	2301      	movs	r3, #1
 80050bc:	4652      	mov	r2, sl
 80050be:	4649      	mov	r1, r9
 80050c0:	4638      	mov	r0, r7
 80050c2:	47c0      	blx	r8
 80050c4:	3001      	adds	r0, #1
 80050c6:	d103      	bne.n	80050d0 <_printf_common+0xb0>
 80050c8:	f04f 30ff 	mov.w	r0, #4294967295
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d0:	3501      	adds	r5, #1
 80050d2:	e7c4      	b.n	800505e <_printf_common+0x3e>
 80050d4:	2030      	movs	r0, #48	; 0x30
 80050d6:	18e1      	adds	r1, r4, r3
 80050d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050e2:	4422      	add	r2, r4
 80050e4:	3302      	adds	r3, #2
 80050e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050ea:	e7c5      	b.n	8005078 <_printf_common+0x58>
 80050ec:	2301      	movs	r3, #1
 80050ee:	4622      	mov	r2, r4
 80050f0:	4649      	mov	r1, r9
 80050f2:	4638      	mov	r0, r7
 80050f4:	47c0      	blx	r8
 80050f6:	3001      	adds	r0, #1
 80050f8:	d0e6      	beq.n	80050c8 <_printf_common+0xa8>
 80050fa:	3601      	adds	r6, #1
 80050fc:	e7d9      	b.n	80050b2 <_printf_common+0x92>
	...

08005100 <_printf_i>:
 8005100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	460c      	mov	r4, r1
 8005106:	7e27      	ldrb	r7, [r4, #24]
 8005108:	4691      	mov	r9, r2
 800510a:	2f78      	cmp	r7, #120	; 0x78
 800510c:	4680      	mov	r8, r0
 800510e:	469a      	mov	sl, r3
 8005110:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005116:	d807      	bhi.n	8005128 <_printf_i+0x28>
 8005118:	2f62      	cmp	r7, #98	; 0x62
 800511a:	d80a      	bhi.n	8005132 <_printf_i+0x32>
 800511c:	2f00      	cmp	r7, #0
 800511e:	f000 80d9 	beq.w	80052d4 <_printf_i+0x1d4>
 8005122:	2f58      	cmp	r7, #88	; 0x58
 8005124:	f000 80a4 	beq.w	8005270 <_printf_i+0x170>
 8005128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800512c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005130:	e03a      	b.n	80051a8 <_printf_i+0xa8>
 8005132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005136:	2b15      	cmp	r3, #21
 8005138:	d8f6      	bhi.n	8005128 <_printf_i+0x28>
 800513a:	a001      	add	r0, pc, #4	; (adr r0, 8005140 <_printf_i+0x40>)
 800513c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005140:	08005199 	.word	0x08005199
 8005144:	080051ad 	.word	0x080051ad
 8005148:	08005129 	.word	0x08005129
 800514c:	08005129 	.word	0x08005129
 8005150:	08005129 	.word	0x08005129
 8005154:	08005129 	.word	0x08005129
 8005158:	080051ad 	.word	0x080051ad
 800515c:	08005129 	.word	0x08005129
 8005160:	08005129 	.word	0x08005129
 8005164:	08005129 	.word	0x08005129
 8005168:	08005129 	.word	0x08005129
 800516c:	080052bb 	.word	0x080052bb
 8005170:	080051dd 	.word	0x080051dd
 8005174:	0800529d 	.word	0x0800529d
 8005178:	08005129 	.word	0x08005129
 800517c:	08005129 	.word	0x08005129
 8005180:	080052dd 	.word	0x080052dd
 8005184:	08005129 	.word	0x08005129
 8005188:	080051dd 	.word	0x080051dd
 800518c:	08005129 	.word	0x08005129
 8005190:	08005129 	.word	0x08005129
 8005194:	080052a5 	.word	0x080052a5
 8005198:	680b      	ldr	r3, [r1, #0]
 800519a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800519e:	1d1a      	adds	r2, r3, #4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	600a      	str	r2, [r1, #0]
 80051a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0a4      	b.n	80052f6 <_printf_i+0x1f6>
 80051ac:	6825      	ldr	r5, [r4, #0]
 80051ae:	6808      	ldr	r0, [r1, #0]
 80051b0:	062e      	lsls	r6, r5, #24
 80051b2:	f100 0304 	add.w	r3, r0, #4
 80051b6:	d50a      	bpl.n	80051ce <_printf_i+0xce>
 80051b8:	6805      	ldr	r5, [r0, #0]
 80051ba:	600b      	str	r3, [r1, #0]
 80051bc:	2d00      	cmp	r5, #0
 80051be:	da03      	bge.n	80051c8 <_printf_i+0xc8>
 80051c0:	232d      	movs	r3, #45	; 0x2d
 80051c2:	426d      	negs	r5, r5
 80051c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c8:	230a      	movs	r3, #10
 80051ca:	485e      	ldr	r0, [pc, #376]	; (8005344 <_printf_i+0x244>)
 80051cc:	e019      	b.n	8005202 <_printf_i+0x102>
 80051ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051d2:	6805      	ldr	r5, [r0, #0]
 80051d4:	600b      	str	r3, [r1, #0]
 80051d6:	bf18      	it	ne
 80051d8:	b22d      	sxthne	r5, r5
 80051da:	e7ef      	b.n	80051bc <_printf_i+0xbc>
 80051dc:	680b      	ldr	r3, [r1, #0]
 80051de:	6825      	ldr	r5, [r4, #0]
 80051e0:	1d18      	adds	r0, r3, #4
 80051e2:	6008      	str	r0, [r1, #0]
 80051e4:	0628      	lsls	r0, r5, #24
 80051e6:	d501      	bpl.n	80051ec <_printf_i+0xec>
 80051e8:	681d      	ldr	r5, [r3, #0]
 80051ea:	e002      	b.n	80051f2 <_printf_i+0xf2>
 80051ec:	0669      	lsls	r1, r5, #25
 80051ee:	d5fb      	bpl.n	80051e8 <_printf_i+0xe8>
 80051f0:	881d      	ldrh	r5, [r3, #0]
 80051f2:	2f6f      	cmp	r7, #111	; 0x6f
 80051f4:	bf0c      	ite	eq
 80051f6:	2308      	moveq	r3, #8
 80051f8:	230a      	movne	r3, #10
 80051fa:	4852      	ldr	r0, [pc, #328]	; (8005344 <_printf_i+0x244>)
 80051fc:	2100      	movs	r1, #0
 80051fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005202:	6866      	ldr	r6, [r4, #4]
 8005204:	2e00      	cmp	r6, #0
 8005206:	bfa8      	it	ge
 8005208:	6821      	ldrge	r1, [r4, #0]
 800520a:	60a6      	str	r6, [r4, #8]
 800520c:	bfa4      	itt	ge
 800520e:	f021 0104 	bicge.w	r1, r1, #4
 8005212:	6021      	strge	r1, [r4, #0]
 8005214:	b90d      	cbnz	r5, 800521a <_printf_i+0x11a>
 8005216:	2e00      	cmp	r6, #0
 8005218:	d04d      	beq.n	80052b6 <_printf_i+0x1b6>
 800521a:	4616      	mov	r6, r2
 800521c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005220:	fb03 5711 	mls	r7, r3, r1, r5
 8005224:	5dc7      	ldrb	r7, [r0, r7]
 8005226:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800522a:	462f      	mov	r7, r5
 800522c:	42bb      	cmp	r3, r7
 800522e:	460d      	mov	r5, r1
 8005230:	d9f4      	bls.n	800521c <_printf_i+0x11c>
 8005232:	2b08      	cmp	r3, #8
 8005234:	d10b      	bne.n	800524e <_printf_i+0x14e>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	07df      	lsls	r7, r3, #31
 800523a:	d508      	bpl.n	800524e <_printf_i+0x14e>
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	6861      	ldr	r1, [r4, #4]
 8005240:	4299      	cmp	r1, r3
 8005242:	bfde      	ittt	le
 8005244:	2330      	movle	r3, #48	; 0x30
 8005246:	f806 3c01 	strble.w	r3, [r6, #-1]
 800524a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800524e:	1b92      	subs	r2, r2, r6
 8005250:	6122      	str	r2, [r4, #16]
 8005252:	464b      	mov	r3, r9
 8005254:	4621      	mov	r1, r4
 8005256:	4640      	mov	r0, r8
 8005258:	f8cd a000 	str.w	sl, [sp]
 800525c:	aa03      	add	r2, sp, #12
 800525e:	f7ff fedf 	bl	8005020 <_printf_common>
 8005262:	3001      	adds	r0, #1
 8005264:	d14c      	bne.n	8005300 <_printf_i+0x200>
 8005266:	f04f 30ff 	mov.w	r0, #4294967295
 800526a:	b004      	add	sp, #16
 800526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005270:	4834      	ldr	r0, [pc, #208]	; (8005344 <_printf_i+0x244>)
 8005272:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005276:	680e      	ldr	r6, [r1, #0]
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	f856 5b04 	ldr.w	r5, [r6], #4
 800527e:	061f      	lsls	r7, r3, #24
 8005280:	600e      	str	r6, [r1, #0]
 8005282:	d514      	bpl.n	80052ae <_printf_i+0x1ae>
 8005284:	07d9      	lsls	r1, r3, #31
 8005286:	bf44      	itt	mi
 8005288:	f043 0320 	orrmi.w	r3, r3, #32
 800528c:	6023      	strmi	r3, [r4, #0]
 800528e:	b91d      	cbnz	r5, 8005298 <_printf_i+0x198>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	f023 0320 	bic.w	r3, r3, #32
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	2310      	movs	r3, #16
 800529a:	e7af      	b.n	80051fc <_printf_i+0xfc>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	f043 0320 	orr.w	r3, r3, #32
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	2378      	movs	r3, #120	; 0x78
 80052a6:	4828      	ldr	r0, [pc, #160]	; (8005348 <_printf_i+0x248>)
 80052a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ac:	e7e3      	b.n	8005276 <_printf_i+0x176>
 80052ae:	065e      	lsls	r6, r3, #25
 80052b0:	bf48      	it	mi
 80052b2:	b2ad      	uxthmi	r5, r5
 80052b4:	e7e6      	b.n	8005284 <_printf_i+0x184>
 80052b6:	4616      	mov	r6, r2
 80052b8:	e7bb      	b.n	8005232 <_printf_i+0x132>
 80052ba:	680b      	ldr	r3, [r1, #0]
 80052bc:	6826      	ldr	r6, [r4, #0]
 80052be:	1d1d      	adds	r5, r3, #4
 80052c0:	6960      	ldr	r0, [r4, #20]
 80052c2:	600d      	str	r5, [r1, #0]
 80052c4:	0635      	lsls	r5, r6, #24
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	d501      	bpl.n	80052ce <_printf_i+0x1ce>
 80052ca:	6018      	str	r0, [r3, #0]
 80052cc:	e002      	b.n	80052d4 <_printf_i+0x1d4>
 80052ce:	0671      	lsls	r1, r6, #25
 80052d0:	d5fb      	bpl.n	80052ca <_printf_i+0x1ca>
 80052d2:	8018      	strh	r0, [r3, #0]
 80052d4:	2300      	movs	r3, #0
 80052d6:	4616      	mov	r6, r2
 80052d8:	6123      	str	r3, [r4, #16]
 80052da:	e7ba      	b.n	8005252 <_printf_i+0x152>
 80052dc:	680b      	ldr	r3, [r1, #0]
 80052de:	1d1a      	adds	r2, r3, #4
 80052e0:	600a      	str	r2, [r1, #0]
 80052e2:	681e      	ldr	r6, [r3, #0]
 80052e4:	2100      	movs	r1, #0
 80052e6:	4630      	mov	r0, r6
 80052e8:	6862      	ldr	r2, [r4, #4]
 80052ea:	f000 f82f 	bl	800534c <memchr>
 80052ee:	b108      	cbz	r0, 80052f4 <_printf_i+0x1f4>
 80052f0:	1b80      	subs	r0, r0, r6
 80052f2:	6060      	str	r0, [r4, #4]
 80052f4:	6863      	ldr	r3, [r4, #4]
 80052f6:	6123      	str	r3, [r4, #16]
 80052f8:	2300      	movs	r3, #0
 80052fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052fe:	e7a8      	b.n	8005252 <_printf_i+0x152>
 8005300:	4632      	mov	r2, r6
 8005302:	4649      	mov	r1, r9
 8005304:	4640      	mov	r0, r8
 8005306:	6923      	ldr	r3, [r4, #16]
 8005308:	47d0      	blx	sl
 800530a:	3001      	adds	r0, #1
 800530c:	d0ab      	beq.n	8005266 <_printf_i+0x166>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	079b      	lsls	r3, r3, #30
 8005312:	d413      	bmi.n	800533c <_printf_i+0x23c>
 8005314:	68e0      	ldr	r0, [r4, #12]
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	4298      	cmp	r0, r3
 800531a:	bfb8      	it	lt
 800531c:	4618      	movlt	r0, r3
 800531e:	e7a4      	b.n	800526a <_printf_i+0x16a>
 8005320:	2301      	movs	r3, #1
 8005322:	4632      	mov	r2, r6
 8005324:	4649      	mov	r1, r9
 8005326:	4640      	mov	r0, r8
 8005328:	47d0      	blx	sl
 800532a:	3001      	adds	r0, #1
 800532c:	d09b      	beq.n	8005266 <_printf_i+0x166>
 800532e:	3501      	adds	r5, #1
 8005330:	68e3      	ldr	r3, [r4, #12]
 8005332:	9903      	ldr	r1, [sp, #12]
 8005334:	1a5b      	subs	r3, r3, r1
 8005336:	42ab      	cmp	r3, r5
 8005338:	dcf2      	bgt.n	8005320 <_printf_i+0x220>
 800533a:	e7eb      	b.n	8005314 <_printf_i+0x214>
 800533c:	2500      	movs	r5, #0
 800533e:	f104 0619 	add.w	r6, r4, #25
 8005342:	e7f5      	b.n	8005330 <_printf_i+0x230>
 8005344:	080055f5 	.word	0x080055f5
 8005348:	08005606 	.word	0x08005606

0800534c <memchr>:
 800534c:	4603      	mov	r3, r0
 800534e:	b510      	push	{r4, lr}
 8005350:	b2c9      	uxtb	r1, r1
 8005352:	4402      	add	r2, r0
 8005354:	4293      	cmp	r3, r2
 8005356:	4618      	mov	r0, r3
 8005358:	d101      	bne.n	800535e <memchr+0x12>
 800535a:	2000      	movs	r0, #0
 800535c:	e003      	b.n	8005366 <memchr+0x1a>
 800535e:	7804      	ldrb	r4, [r0, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	428c      	cmp	r4, r1
 8005364:	d1f6      	bne.n	8005354 <memchr+0x8>
 8005366:	bd10      	pop	{r4, pc}

08005368 <memcpy>:
 8005368:	440a      	add	r2, r1
 800536a:	4291      	cmp	r1, r2
 800536c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005370:	d100      	bne.n	8005374 <memcpy+0xc>
 8005372:	4770      	bx	lr
 8005374:	b510      	push	{r4, lr}
 8005376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800537a:	4291      	cmp	r1, r2
 800537c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005380:	d1f9      	bne.n	8005376 <memcpy+0xe>
 8005382:	bd10      	pop	{r4, pc}

08005384 <memmove>:
 8005384:	4288      	cmp	r0, r1
 8005386:	b510      	push	{r4, lr}
 8005388:	eb01 0402 	add.w	r4, r1, r2
 800538c:	d902      	bls.n	8005394 <memmove+0x10>
 800538e:	4284      	cmp	r4, r0
 8005390:	4623      	mov	r3, r4
 8005392:	d807      	bhi.n	80053a4 <memmove+0x20>
 8005394:	1e43      	subs	r3, r0, #1
 8005396:	42a1      	cmp	r1, r4
 8005398:	d008      	beq.n	80053ac <memmove+0x28>
 800539a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800539e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053a2:	e7f8      	b.n	8005396 <memmove+0x12>
 80053a4:	4601      	mov	r1, r0
 80053a6:	4402      	add	r2, r0
 80053a8:	428a      	cmp	r2, r1
 80053aa:	d100      	bne.n	80053ae <memmove+0x2a>
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053b6:	e7f7      	b.n	80053a8 <memmove+0x24>

080053b8 <_free_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4605      	mov	r5, r0
 80053bc:	2900      	cmp	r1, #0
 80053be:	d043      	beq.n	8005448 <_free_r+0x90>
 80053c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c4:	1f0c      	subs	r4, r1, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bfb8      	it	lt
 80053ca:	18e4      	addlt	r4, r4, r3
 80053cc:	f000 f8d0 	bl	8005570 <__malloc_lock>
 80053d0:	4a1e      	ldr	r2, [pc, #120]	; (800544c <_free_r+0x94>)
 80053d2:	6813      	ldr	r3, [r2, #0]
 80053d4:	4610      	mov	r0, r2
 80053d6:	b933      	cbnz	r3, 80053e6 <_free_r+0x2e>
 80053d8:	6063      	str	r3, [r4, #4]
 80053da:	6014      	str	r4, [r2, #0]
 80053dc:	4628      	mov	r0, r5
 80053de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053e2:	f000 b8cb 	b.w	800557c <__malloc_unlock>
 80053e6:	42a3      	cmp	r3, r4
 80053e8:	d90a      	bls.n	8005400 <_free_r+0x48>
 80053ea:	6821      	ldr	r1, [r4, #0]
 80053ec:	1862      	adds	r2, r4, r1
 80053ee:	4293      	cmp	r3, r2
 80053f0:	bf01      	itttt	eq
 80053f2:	681a      	ldreq	r2, [r3, #0]
 80053f4:	685b      	ldreq	r3, [r3, #4]
 80053f6:	1852      	addeq	r2, r2, r1
 80053f8:	6022      	streq	r2, [r4, #0]
 80053fa:	6063      	str	r3, [r4, #4]
 80053fc:	6004      	str	r4, [r0, #0]
 80053fe:	e7ed      	b.n	80053dc <_free_r+0x24>
 8005400:	461a      	mov	r2, r3
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	b10b      	cbz	r3, 800540a <_free_r+0x52>
 8005406:	42a3      	cmp	r3, r4
 8005408:	d9fa      	bls.n	8005400 <_free_r+0x48>
 800540a:	6811      	ldr	r1, [r2, #0]
 800540c:	1850      	adds	r0, r2, r1
 800540e:	42a0      	cmp	r0, r4
 8005410:	d10b      	bne.n	800542a <_free_r+0x72>
 8005412:	6820      	ldr	r0, [r4, #0]
 8005414:	4401      	add	r1, r0
 8005416:	1850      	adds	r0, r2, r1
 8005418:	4283      	cmp	r3, r0
 800541a:	6011      	str	r1, [r2, #0]
 800541c:	d1de      	bne.n	80053dc <_free_r+0x24>
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4401      	add	r1, r0
 8005424:	6011      	str	r1, [r2, #0]
 8005426:	6053      	str	r3, [r2, #4]
 8005428:	e7d8      	b.n	80053dc <_free_r+0x24>
 800542a:	d902      	bls.n	8005432 <_free_r+0x7a>
 800542c:	230c      	movs	r3, #12
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	e7d4      	b.n	80053dc <_free_r+0x24>
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	1821      	adds	r1, r4, r0
 8005436:	428b      	cmp	r3, r1
 8005438:	bf01      	itttt	eq
 800543a:	6819      	ldreq	r1, [r3, #0]
 800543c:	685b      	ldreq	r3, [r3, #4]
 800543e:	1809      	addeq	r1, r1, r0
 8005440:	6021      	streq	r1, [r4, #0]
 8005442:	6063      	str	r3, [r4, #4]
 8005444:	6054      	str	r4, [r2, #4]
 8005446:	e7c9      	b.n	80053dc <_free_r+0x24>
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	bf00      	nop
 800544c:	20000090 	.word	0x20000090

08005450 <_malloc_r>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	1ccd      	adds	r5, r1, #3
 8005454:	f025 0503 	bic.w	r5, r5, #3
 8005458:	3508      	adds	r5, #8
 800545a:	2d0c      	cmp	r5, #12
 800545c:	bf38      	it	cc
 800545e:	250c      	movcc	r5, #12
 8005460:	2d00      	cmp	r5, #0
 8005462:	4606      	mov	r6, r0
 8005464:	db01      	blt.n	800546a <_malloc_r+0x1a>
 8005466:	42a9      	cmp	r1, r5
 8005468:	d903      	bls.n	8005472 <_malloc_r+0x22>
 800546a:	230c      	movs	r3, #12
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	2000      	movs	r0, #0
 8005470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005472:	f000 f87d 	bl	8005570 <__malloc_lock>
 8005476:	4921      	ldr	r1, [pc, #132]	; (80054fc <_malloc_r+0xac>)
 8005478:	680a      	ldr	r2, [r1, #0]
 800547a:	4614      	mov	r4, r2
 800547c:	b99c      	cbnz	r4, 80054a6 <_malloc_r+0x56>
 800547e:	4f20      	ldr	r7, [pc, #128]	; (8005500 <_malloc_r+0xb0>)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	b923      	cbnz	r3, 800548e <_malloc_r+0x3e>
 8005484:	4621      	mov	r1, r4
 8005486:	4630      	mov	r0, r6
 8005488:	f000 f862 	bl	8005550 <_sbrk_r>
 800548c:	6038      	str	r0, [r7, #0]
 800548e:	4629      	mov	r1, r5
 8005490:	4630      	mov	r0, r6
 8005492:	f000 f85d 	bl	8005550 <_sbrk_r>
 8005496:	1c43      	adds	r3, r0, #1
 8005498:	d123      	bne.n	80054e2 <_malloc_r+0x92>
 800549a:	230c      	movs	r3, #12
 800549c:	4630      	mov	r0, r6
 800549e:	6033      	str	r3, [r6, #0]
 80054a0:	f000 f86c 	bl	800557c <__malloc_unlock>
 80054a4:	e7e3      	b.n	800546e <_malloc_r+0x1e>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	1b5b      	subs	r3, r3, r5
 80054aa:	d417      	bmi.n	80054dc <_malloc_r+0x8c>
 80054ac:	2b0b      	cmp	r3, #11
 80054ae:	d903      	bls.n	80054b8 <_malloc_r+0x68>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	441c      	add	r4, r3
 80054b4:	6025      	str	r5, [r4, #0]
 80054b6:	e004      	b.n	80054c2 <_malloc_r+0x72>
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	42a2      	cmp	r2, r4
 80054bc:	bf0c      	ite	eq
 80054be:	600b      	streq	r3, [r1, #0]
 80054c0:	6053      	strne	r3, [r2, #4]
 80054c2:	4630      	mov	r0, r6
 80054c4:	f000 f85a 	bl	800557c <__malloc_unlock>
 80054c8:	f104 000b 	add.w	r0, r4, #11
 80054cc:	1d23      	adds	r3, r4, #4
 80054ce:	f020 0007 	bic.w	r0, r0, #7
 80054d2:	1ac2      	subs	r2, r0, r3
 80054d4:	d0cc      	beq.n	8005470 <_malloc_r+0x20>
 80054d6:	1a1b      	subs	r3, r3, r0
 80054d8:	50a3      	str	r3, [r4, r2]
 80054da:	e7c9      	b.n	8005470 <_malloc_r+0x20>
 80054dc:	4622      	mov	r2, r4
 80054de:	6864      	ldr	r4, [r4, #4]
 80054e0:	e7cc      	b.n	800547c <_malloc_r+0x2c>
 80054e2:	1cc4      	adds	r4, r0, #3
 80054e4:	f024 0403 	bic.w	r4, r4, #3
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d0e3      	beq.n	80054b4 <_malloc_r+0x64>
 80054ec:	1a21      	subs	r1, r4, r0
 80054ee:	4630      	mov	r0, r6
 80054f0:	f000 f82e 	bl	8005550 <_sbrk_r>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d1dd      	bne.n	80054b4 <_malloc_r+0x64>
 80054f8:	e7cf      	b.n	800549a <_malloc_r+0x4a>
 80054fa:	bf00      	nop
 80054fc:	20000090 	.word	0x20000090
 8005500:	20000094 	.word	0x20000094

08005504 <_realloc_r>:
 8005504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005506:	4607      	mov	r7, r0
 8005508:	4614      	mov	r4, r2
 800550a:	460e      	mov	r6, r1
 800550c:	b921      	cbnz	r1, 8005518 <_realloc_r+0x14>
 800550e:	4611      	mov	r1, r2
 8005510:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005514:	f7ff bf9c 	b.w	8005450 <_malloc_r>
 8005518:	b922      	cbnz	r2, 8005524 <_realloc_r+0x20>
 800551a:	f7ff ff4d 	bl	80053b8 <_free_r>
 800551e:	4625      	mov	r5, r4
 8005520:	4628      	mov	r0, r5
 8005522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005524:	f000 f830 	bl	8005588 <_malloc_usable_size_r>
 8005528:	42a0      	cmp	r0, r4
 800552a:	d20f      	bcs.n	800554c <_realloc_r+0x48>
 800552c:	4621      	mov	r1, r4
 800552e:	4638      	mov	r0, r7
 8005530:	f7ff ff8e 	bl	8005450 <_malloc_r>
 8005534:	4605      	mov	r5, r0
 8005536:	2800      	cmp	r0, #0
 8005538:	d0f2      	beq.n	8005520 <_realloc_r+0x1c>
 800553a:	4631      	mov	r1, r6
 800553c:	4622      	mov	r2, r4
 800553e:	f7ff ff13 	bl	8005368 <memcpy>
 8005542:	4631      	mov	r1, r6
 8005544:	4638      	mov	r0, r7
 8005546:	f7ff ff37 	bl	80053b8 <_free_r>
 800554a:	e7e9      	b.n	8005520 <_realloc_r+0x1c>
 800554c:	4635      	mov	r5, r6
 800554e:	e7e7      	b.n	8005520 <_realloc_r+0x1c>

08005550 <_sbrk_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	2300      	movs	r3, #0
 8005554:	4d05      	ldr	r5, [pc, #20]	; (800556c <_sbrk_r+0x1c>)
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fc f9a4 	bl	80018a8 <_sbrk>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_sbrk_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_sbrk_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	2000022c 	.word	0x2000022c

08005570 <__malloc_lock>:
 8005570:	4801      	ldr	r0, [pc, #4]	; (8005578 <__malloc_lock+0x8>)
 8005572:	f000 b811 	b.w	8005598 <__retarget_lock_acquire_recursive>
 8005576:	bf00      	nop
 8005578:	20000234 	.word	0x20000234

0800557c <__malloc_unlock>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__malloc_unlock+0x8>)
 800557e:	f000 b80c 	b.w	800559a <__retarget_lock_release_recursive>
 8005582:	bf00      	nop
 8005584:	20000234 	.word	0x20000234

08005588 <_malloc_usable_size_r>:
 8005588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800558c:	1f18      	subs	r0, r3, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	bfbc      	itt	lt
 8005592:	580b      	ldrlt	r3, [r1, r0]
 8005594:	18c0      	addlt	r0, r0, r3
 8005596:	4770      	bx	lr

08005598 <__retarget_lock_acquire_recursive>:
 8005598:	4770      	bx	lr

0800559a <__retarget_lock_release_recursive>:
 800559a:	4770      	bx	lr

0800559c <_init>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr

080055a8 <_fini>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	bf00      	nop
 80055ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ae:	bc08      	pop	{r3}
 80055b0:	469e      	mov	lr, r3
 80055b2:	4770      	bx	lr
